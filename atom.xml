<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一悲备用机</title>
  
  <subtitle>备用无敌</subtitle>
  <link href="http://jaik.top/atom.xml" rel="self"/>
  
  <link href="http://jaik.top/"/>
  <updated>2021-08-12T14:07:00.000Z</updated>
  <id>http://jaik.top/</id>
  
  <author>
    <name>陈一悲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客封面水波效果</title>
    <link href="http://jaik.top/2021/08/12/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2%E6%B0%B4%E6%B3%A2%E6%95%88%E6%9E%9C/"/>
    <id>http://jaik.top/2021/08/12/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2%E6%B0%B4%E6%B3%A2%E6%95%88%E6%9E%9C/</id>
    <published>2021-08-12T14:07:00.000Z</published>
    <updated>2021-08-12T14:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>　预期效果图如下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jaikchen/JaikImage/shuibo.png"></p><h2 id="动手操作"><a href="#动手操作" class="headerlink" title="动手操作"></a>动手操作</h2><ul><li>　在themes\butterfly\source\js目录下创建一个ripples.js文件，并将如下代码写入该文件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    $(&quot;#page-header&quot;).ripples(&#123;</span><br><span class="line">      resolution: 512,</span><br><span class="line">      dropRadius: 10, //px</span><br><span class="line">      perturbance: 0.04,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    $(&quot;.error&quot;).show().text(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>　找到主题配置文件_config.butterfly.yml，在inject的bottom处引入以下文件:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;script defer src=&quot;https://rmt.dogedoge.com/fetch/~/source/jsdelivr/npm/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script defer src=&quot;https://cdn.jsdelivr.net/gh/sirxemic/jquery.ripples/dist/jquery.ripples.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script defer src=&quot;/js/ripples.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>　然后ｈｅｘｏ一键三连</li></ul>]]></content>
    
    
    <summary type="html">butterfly主题魔改记录</summary>
    
    
    
    <category term="记录" scheme="http://jaik.top/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="博客" scheme="http://jaik.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="魔改" scheme="http://jaik.top/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>八月</title>
    <link href="http://jaik.top/2021/08/01/%E5%85%AB%E6%9C%88/"/>
    <id>http://jaik.top/2021/08/01/%E5%85%AB%E6%9C%88/</id>
    <published>2021-08-01T14:23:02.000Z</published>
    <updated>2021-08-01T14:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚头痛，很早就上了床，睡前祈祷能有个好觉。吃完药，看了会书就开始异世界大冒险。<br>梦里的时间泛泛。<br>醒来是隔壁家大锤小锤的砸墙，电钻工具声嗡嗡作响，一瞬间像敲锣打鼓的迎亲队。<br>这时，手机上是星期日，5：35，八月一日。<br>很好，是个不太令人愉悦的早晨，吃掉最后一份酸奶和面包，上午忙忙碌碌，挠挠头发，实现了想要蛮久的小功能，心情还算偷税。<br>下午着手复习java的时候发现，之前的java笔记被误删（复习动力-99999），硬着头皮看了几个小时，耐心消磨完就去逛scp站。<br>看了几篇后被母亲大人忽悠去超市。<br>早上起来没有洗头发，秉着苏北没朋友的想法，顶着稍乱的中分扯一份口罩就出门了，这是来南通一个月里第二次出门。<br>超市还是上一次来过超市，零食却少买了很多，母亲大人一边抱怨越大越挑食，一边给推荐那些她也不是很喜欢的零食。<br>大多数都被一悲拒绝。<br>嗯，已经瘦了五斤。<br>吃完晚饭，天还没黑，窗外的蓝天白云和记忆力的蓝天白云大差不差。伸个拦腰，抽出一瓶可乐，拧开的气泡好似向夏天捅了一把水果刀。</p>]]></content>
    
    
    <summary type="html">发呆时顺手敲的文字</summary>
    
    
    
    <category term="念念碎" scheme="http://jaik.top/categories/%E5%BF%B5%E5%BF%B5%E7%A2%8E/"/>
    
    
    <category term="生活" scheme="http://jaik.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="夏天" scheme="http://jaik.top/tags/%E5%A4%8F%E5%A4%A9/"/>
    
    <category term="日记" scheme="http://jaik.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>少年你别急，未来尚可期</title>
    <link href="http://jaik.top/2021/07/12/%E5%B0%91%E5%B9%B4%E4%BD%A0%E5%88%AB%E6%80%A5%EF%BC%8C%E6%9C%AA%E6%9D%A5%E5%B0%9A%E5%8F%AF%E6%9C%9F/"/>
    <id>http://jaik.top/2021/07/12/%E5%B0%91%E5%B9%B4%E4%BD%A0%E5%88%AB%E6%80%A5%EF%BC%8C%E6%9C%AA%E6%9D%A5%E5%B0%9A%E5%8F%AF%E6%9C%9F/</id>
    <published>2021-07-12T13:05:12.000Z</published>
    <updated>2021-07-12T13:05:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>生日那天醒来，拉开床帘，地板上的光影给不大的空间填了点明亮。<br>室友还在梦里，蹑手蹑脚的走到阳台，两千公里的远方，恍若隔世。<br>没有收到朋友的祝福，也没有很失望，懒得出去，拆开预存的泡面，把料包撒的好看点算得上小小的仪式感作祟。<br>收拾好了东西，一个人带上耳机安安静静的n刷玉子的时候，被现在已经忘了的画面弄得热泪盈眶。<br>上一次感动是什么时候呢，太久了。就像对你的记忆还停留在那个背着帆布包的小姑娘，不是故作玄虚，事隔经年，也不知你是否别来无恙<br>别来无恙，有种玻璃晴朗，橘子辉煌的味道。<br>于时间而言，最怕的，莫不是故人风雨散。<br>其实说是故人都有些勉强，原谅我巧舌如簧不善言辞，生活里少有的交集全成了故事的遗憾花纹。<br>第一次听《我们》是在被窝里等老师查寝后悄悄点开的。很是喜欢其中一句歌词，没有句号已经很完美了，何必误会故事没说完。<br>可能是就像网易热评说的一个人矫情起来，听什么歌都像是在唱自己。<br> 矫情就矫情吧，我知足。<br>整理旧书发现在《倾城之恋》的扉页里有一行小字。<br>也不知是不是一条发送失败的信息，或是说是我遗忘的心事，日期巧合的像是别有用心。<br>问过许多人喜欢是什么感觉，都没能得到一个完美的答案。<br>众说纷纭，我更偏向毛姆，感情有理智所根本不能理解的理由。<br>所以啊，欢喜是玄而又玄的事，于你，于我。<br>想来二十岁对喜欢与爱人有点糊涂也不算太过分。<br>不过我们都值得被爱，都应在断断续续的联系里，变成更宽厚，更赤诚的你我。<br>那样，算了。<br>我素来明白后知后觉最是错过，可有太多的时候都是突然发现怎么再也回不到了从前。<br>好一句岁月不堪数，故人不如初。<br>不知道自己是否喜欢过小姑娘，有个弟弟边嘲讽边不屑的给我按下了棺材板，但这已经成了老和尚给小和尚讲的故事，不可深究。<br>都这么久了还没遇见一个想主动追求的女生，是很幸运的悲哀，不妨就等等看，哪怕最终等不到，可总要有人过不一样的生活吧<br>说起来，也不知你会不会读到这份文字，不如继续由缘分决定。<br>总之岁月漫长，明媚温暖。<br>又一年生日，请你快乐。<br>愿你深情不负，求之必得。<br>愿你尘埃落地后，仍期待未来。 </p>]]></content>
    
    
    <summary type="html">很久很久以前写给小姑娘但又没写完的草稿，所幸就这样</summary>
    
    
    
    <category term="念念碎" scheme="http://jaik.top/categories/%E5%BF%B5%E5%BF%B5%E7%A2%8E/"/>
    
    
    <category term="生活" scheme="http://jaik.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="书信" scheme="http://jaik.top/tags/%E4%B9%A6%E4%BF%A1/"/>
    
    <category term="生日" scheme="http://jaik.top/tags/%E7%94%9F%E6%97%A5/"/>
    
    <category term="小姑娘" scheme="http://jaik.top/tags/%E5%B0%8F%E5%A7%91%E5%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>于登机口收到延误短信时写给阿浣</title>
    <link href="http://jaik.top/2021/07/06/%E4%BA%8E%E7%99%BB%E6%9C%BA%E5%8F%A3%E6%94%B6%E5%88%B0%E5%BB%B6%E8%AF%AF%E7%9F%AD%E4%BF%A1%E6%97%B6%E5%86%99%E7%BB%99%E9%98%BF%E6%B5%A3/"/>
    <id>http://jaik.top/2021/07/06/%E4%BA%8E%E7%99%BB%E6%9C%BA%E5%8F%A3%E6%94%B6%E5%88%B0%E5%BB%B6%E8%AF%AF%E7%9F%AD%E4%BF%A1%E6%97%B6%E5%86%99%E7%BB%99%E9%98%BF%E6%B5%A3/</id>
    <published>2021-07-06T03:34:39.000Z</published>
    <updated>2021-07-06T03:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>别笑，又延误了，真就空弃之子，坐飞机就没有一次顺顺利利的。<br>本来想在飞机上给阿浣写点什么东西，不过闲着也是闲着，又没有人可以欺负，就只能来给阿浣写点最近生活的吐槽。<br>前一段时间天阴的厉害，过的真的很不如意。<br>在想疯狂学习的时候被各种不太美好的事物打扰，而起因是实验室所谓的装修。<br>五一前后一共花了大概一个月吧，装修的内容是什么呢。<br>我想想啊，把交换机分开放，换了桌子，没了，哦，对，桌子还是我们自己搬出去的，他们拆交换机用了一天半，其他时间就一直不让进，在进行“装修”。<br>换后桌子没有图书馆的大，刚好只够一个笔记本加键盘，如果想看书大笔记的话，大概是不够的，27寸的显示器大概也是不够的。<br>如果说他们强行压缩我们的位置是为了给更强的人，虽然有点不甘心，可这也是无可厚非的。可那些老师就说让我们去带一带新人。<br>带不认识，本没有资格进来的新人？说实话，很拒绝的，大一的新人稍微会点还有可能，至于那些大二的，甚至大三的。<br>大家都是成年人了总要为自己的行为负责不是吗，通宵的电动，去不完的聚会很快乐我是知道的。面对实习就业和考研未来的时候两手都毫无准备开始寻找无偿的帮助？<br>我为什么要去帮忙。我每天的早期晚归不就是想多点时间，多学点东西，给自己一份不算太大的希望吗？<br>我总要为我自己考虑一下吧，无亲无故，突然为别人的事情分精力，恕我直言，我不愿意。<br>我不是老师招进来的杂鱼，学了很久的东西我还只敢说了解，为什么刚接触的人可以说擅长啊，他们的自我定位到底是什么，期末考试吗？这学期的期末考试，很多课我都只花一两个小时就可以考90+，绩点固然有用，可非双的绩点在大公司不透明不可见的。<br>被学校的大饼划住了大脑？为什么不多去看看这个真实的就业考研情况啊，那些985 211硕士毕业三面通过却因为无职位而被pass的大佬，该怎么样和他们竞争。<br>我的学校并不好，稍微有点权力的都在想着怎么样可以捞更多的钱，而并非怎么样让学校变得更好，很多很有能力的老师已经走了，打比赛都没有真正有实力的老师带队，当我们白手起家有了成果又分蛋糕又想让我们分出时间。<br>自己摸索其实已经浪费了很多时间，他们是真的不考虑我们的未来。<br>当我想到这些的那晚后，我对学校的最后一份希望也覆灭了，书上说当周围的黑暗想要吞噬你时，你就是黑暗里的那束光。<br>蛮对不起实验室的前辈们的，我来的太晚了，薪火相传的那束光，到我这，还没接住，闪烁闪烁，便熄灭了。自第二次与老师对线后，在学校的一切成了交易，我用几万块钱买一份本科学位，不是怯懦逃避了，是失望撞倒了不周山。<br>少数学生在学校的力量太微弱了，我不想让学校的悲哀成为我的悲哀，可我也没能力没时间没精力去改变学校。<br>毕业多年后，会有谁真正感谢这里呢？至少不会是我。<br>现在其实很坦然了，如果那些负面扑来，那我就离开，出去住也好，总不能真的为别人浪费的时间买单吧，那我浪费的时间该问谁要呢。<br>现在，放假了。打算回家先好好睡一觉，很久没有超过七小时的睡眠了，也很久没有和好兄弟一起打一场尽兴的游戏了，付出的时间和精力现在还是看不见什么反馈，大学的枷锁有时候重的让人喘不过气，所幸还是勉强度过了。我似乎在成长，每一次熬过一段看不见光的日子就会对生活多一份坦然，我不会因为好朋友老是动手动脚而厌烦，我不会因为被老师指定在考卷位置一个人孤零零的的特殊对待而愤怒，不会因为意外打乱了行程而抱怨。就像现在，意料内的意外事故并没有怎么影响我的心情，只是默默抽出电脑写点东西。</p>]]></content>
    
    
    <summary type="html">写给阿浣小朋友的书信</summary>
    
    
    
    <category term="书信" scheme="http://jaik.top/categories/%E4%B9%A6%E4%BF%A1/"/>
    
    
    <category term="生活" scheme="http://jaik.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="书信" scheme="http://jaik.top/tags/%E4%B9%A6%E4%BF%A1/"/>
    
    <category term="飞机延误" scheme="http://jaik.top/tags/%E9%A3%9E%E6%9C%BA%E5%BB%B6%E8%AF%AF/"/>
    
    <category term="致阿浣" scheme="http://jaik.top/tags/%E8%87%B4%E9%98%BF%E6%B5%A3/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="http://jaik.top/2021/06/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://jaik.top/2021/06/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-06-20T07:28:00.000Z</published>
    <updated>2021-06-20T07:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统引论"><a href="#操作系统引论" class="headerlink" title="操作系统引论"></a>操作系统引论</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>负责管理协调硬件，软件等计算机资源的工作</li><li>为上层用户，应用程序提供简单易用的服务</li><li>是一种软件</li></ul><h3 id="功能目标"><a href="#功能目标" class="headerlink" title="功能目标"></a>功能目标</h3><ul><li><p>作为用户与计算机硬件之间的接口</p><ul><li><p>提供功能</p><ul><li><p>程序接口</p><ul><li>系统调用</li></ul></li><li><p>GUI</p><ul><li><p>图形用户界面</p><ul><li>用户可以使用图像进行操作</li></ul></li></ul></li><li><p>命令接口</p><ul><li><p>联机命令接口</p><p>用户说一句，系统做一句</p><ul><li>交互式命令接口</li></ul></li><li><p>脱机命令接口</p><p>用户说一堆，系统做一堆</p><ul><li>批处理命令接口</li></ul></li></ul></li></ul></li><li><p>目标</p><ul><li>方便用户使用</li></ul></li></ul></li><li><p>操作系统作为计算机系统的资源管理者</p><ul><li><p>提供功能</p><ul><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li></ul></li><li><p>目标</p><ul><li>安全，高效</li></ul></li></ul></li><li><p>实现对计算机资源的抽象</p></li></ul><h3 id="操作系统的四个特征"><a href="#操作系统的四个特征" class="headerlink" title="操作系统的四个特征"></a>操作系统的四个特征</h3><ul><li><p>并发</p><ul><li><p>两个或多个事件同一时间间隔发生</p><p>宏观上是同时发生，微观上是交替发生</p><ul><li><p>并发性</p><ul><li>计算机系统中方存在者多个运行着的程序</li></ul></li></ul></li></ul></li><li><p>并行</p><ul><li>两个或者多个事件在同一时间发生</li></ul></li><li><p>共享</p><ul><li><p>互斥共享方式</p><ul><li>一个时段内只允许一个进程访问该资源</li></ul></li><li><p>同时访问方式</p><ul><li>一个时段内允许多个进程访问该资源</li></ul></li></ul></li><li><p>虚拟</p><ul><li><p>把一个物理上的实体变成若干个逻辑上的对应物，物理实体是实际存在的，而逻辑上对应物是用户感受到的</p><ul><li>空分复用技术</li><li>时分复用技术</li></ul></li></ul></li><li><p>异步</p><ul><li>在多道程序环境下，允许多个并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性</li></ul></li></ul><h3 id="发展和分类"><a href="#发展和分类" class="headerlink" title="发展和分类"></a>发展和分类</h3><ul><li><p>手工操作阶段</p><ul><li><p>主要缺点</p><ul><li>用户独占全机，人机速度矛盾导致资源利用率极低</li></ul></li></ul></li><li><p>批处理阶段</p><ul><li><p>单道批处理系统</p><ul><li><p>引入脱机输入/输出技术（磁带，并监督程序负责控制作业的输入输出）</p><ul><li><p>优点</p><ul><li>缓解了一定成程度的人机速度矛盾，资源利用率有所提升</li></ul></li><li><p>缺点</p><ul><li>内存中仅能有一道程序运行，只有该程序运行结束后才能调入下一道程序，cpu有大量的时间是在空闲等待I/O完成，资源利用率依旧很低</li></ul></li></ul></li></ul></li><li><p>单道批处理系统</p><ul><li><p>优点</p><ul><li>多道程序并发执行，共享计算机资源，资源利用率大幅提升，CPU和其他资源保持忙碌状态，系统吞吐量增大</li></ul></li><li><p>缺点</p><ul><li><p>用户响应时间长，没有人机交互功能</p><p>用户提交自己的作业后就只能等计算机处理完成，中间不能控制自己的作业执行</p></li></ul></li></ul></li></ul></li><li><p>分时操作系统</p><ul><li><p>计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互</p><ul><li><p>优点</p><ul><li>解决了人机交互问题，允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在</li></ul></li><li><p>缺点</p><ul><li>不能优先处理一些紧急任务，操作系统对各个用户/作业完全公平，循环的为每一个用户/作业服务一个时间片，不区分任务紧急性</li></ul></li></ul></li></ul></li><li><p>实时操作系统</p><ul><li><p>优点</p><ul><li><p>能够优先响应一些紧急任务，某些紧急任务不需要时间片排队</p><ul><li>在实时操作系统的控制下，计算机系统接受到外部信号后及时进行处理，并且要在严格时限内处理完事件，实时操作系统的主要特点是及时性和可靠性</li></ul></li></ul></li><li><p>分类</p><ul><li><p>硬实时</p><ul><li>必须在绝对严格的规定时间完成处理</li></ul></li><li><p>软实时</p><ul><li>能接受偶尔违反时间规定</li></ul></li></ul></li></ul></li><li><p>网络操作系统</p></li><li><p>分布式操作系统</p></li><li><p>个人计算机操作系统</p></li></ul><h3 id="允许机制和体系结构"><a href="#允许机制和体系结构" class="headerlink" title="允许机制和体系结构"></a>允许机制和体系结构</h3><ul><li><p>运行机制</p><ul><li><p>两种指令</p><ul><li><p>特权指令</p><ul><li>内存清零指令等</li></ul></li><li><p>非特权指令</p><ul><li>普通运算指令等</li></ul></li></ul></li><li><p>两种处理器状态</p><p>用程序状态字寄存器（PSW）中的某标志位来标识当前处理器处于什么状态，如0为用户态，1为核心态</p><ul><li><p>核心态</p><ul><li>特权指令，非特权指令都可以执行</li></ul></li><li><p>用户态</p><ul><li>CPU只能执行非特权指令</li></ul></li></ul></li><li><p>两种程序</p><ul><li><p>内核程序</p><ul><li>系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态</li></ul></li><li><p>应用程序</p><ul><li>为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态</li></ul></li></ul></li></ul></li><li><p>操作系统内核</p><ul><li><p>组成</p><ul><li><p>时钟管理</p><ul><li>计时功能</li></ul></li><li><p>中断处理</p><ul><li>负责中断机制</li></ul></li><li><p>原语</p><ul><li>原语是一种特殊的程序</li><li>是最接近硬件的部分</li><li>这种程序的运行具有原子性，其运行只能一气呵成，不可中断</li><li>运行时间较短，调用频繁</li></ul></li><li><p>对系统资源进行管理的功能</p><ul><li>进程管理</li><li>存储器管理</li><li>设备管理</li></ul></li></ul></li><li><p>定义</p><ul><li>内核是计算机上配置的底层软件，是操作系统最基础，最核心的部分，而实现系统内核功能的那些程序就是内核程序</li></ul></li></ul></li><li><p>操作系统的体系结构</p><ul><li><p>大内核</p><ul><li><p>将操作系统的主要功能都作为系统内核，运行在核心态</p></li><li><p>优点</p><ul><li>高性能</li></ul></li><li><p>缺点</p><ul><li>内核代码庞大，结构混乱，难以维护</li></ul></li></ul></li><li><p>微内核</p><ul><li><p>只把最基本的功能保留在内核</p></li><li><p>优点</p><ul><li>内核功能少，结构清晰，难以维护</li></ul></li><li><p>缺点</p><ul><li>需要频繁地使用核心态和用户态之间切换，性能低</li></ul></li></ul></li></ul></li></ul><h3 id="处理机管理功能"><a href="#处理机管理功能" class="headerlink" title="处理机管理功能"></a>处理机管理功能</h3><ul><li><p>中断和异常</p><ul><li><p>中断机制的诞生</p><ul><li><p>引入中断机制，实现多道程序并发执行，其本质为发生中断就意味着需要操作系统介入，开展管理工作</p><ul><li>发生了中断就意味着需要操作系统介入，开展管理工作，由于操作系统的管理工作（比如进程切换，分配 I/O设备等）需要使用特权指令，因此CPU要从用户态转为核心态，中断可以使CPU从用户态切换为核心态，使操作系统获取计算机的控制权，有了中断，才能实现多道程序并发执行</li></ul></li></ul></li><li><p>中断的概念和作用</p><ul><li>当中断发生时，CPU立即进入核心态</li><li>当中断发生后，当前运行的进程暂停运行，并由操作系统对中断进行处理</li><li>对于不同的中断信号，会进行不同的处理</li></ul></li><li><p>中断的分类</p><ul><li><p>内中断（异常，例外，陷入）</p><ul><li><p>分类1</p><ul><li><p>强迫中断</p><ul><li>硬件故障</li><li>软件中断</li></ul></li><li><p>自愿中断</p><ul><li><p>指令中断</p><ul><li>系统调用时使用的访管指令（又叫陷入指令，tap指令）</li></ul></li></ul></li></ul></li><li><p>分类二</p><ul><li><p>陷阱，陷入（trap）</p><ul><li>有意为之的异常，如系统调用</li></ul></li><li><p>故障（fault）</p><ul><li>由错误条件引起的，可能被故障处理程序修复，如缺页</li></ul></li><li><p>终止（abort）</p><ul><li>不可恢复的致命错误造成的结果，终止处理程序不再将控制返回给引发终止的应用程序，如整数除0</li></ul></li></ul></li></ul></li><li><p>外中断（狭义上的中断）</p><ul><li>外设请求</li><li>人工干预</li></ul></li></ul></li><li><p>外中断的处理过程</p><ul><li>每条指令执行结束后，cpu检查是否有外部中断信号</li><li>若有外部中断信号，则需要保护被中断进程的cpu环境</li><li>根据中断信号类型转入相应的中断处理程序</li><li>恢复原进程的cpu环境并退出中断，返回原进程继续往下执行</li></ul></li></ul></li><li><p>系统调用</p><ul><li><p>定义</p><ul><li><p>系统调用是操作系统提供应用程序（程序员/编程人员）使用的接口</p><p>可以理解为一种可供应用程序应用的特殊函数</p></li><li><p>应用程序可以发出系统调用请求来获得操作系统的服务</p></li><li><p>系统调用会使处理器从用户态进入核心态</p></li></ul></li><li><p>作用</p><ul><li>应用程序通过系统调用请求操作系统的服务，系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，凡是与资源有关的操作（如存储分配，I/O操作，文件管理等），都必须通过系统调用都方法向操作系统提供服务请求，由操作系统代为完成，这样可以保证系统的稳定性和安全性，防止用户进行非法操作</li></ul></li><li><p>系统调用与库函数的区别</p><ul><li>有的库函数是对系统调用的进一步封装</li><li>当今编写应用程序大多是通过高级语言提供库函数间接的进行系统调用</li></ul></li><li><p>按功能分类</p><ul><li>设备管理</li><li>文件管理</li><li>进程管理</li><li>进程通信</li><li>内存管理</li></ul></li><li><p>系统调用的过程</p><ul><li>传递系统调用参数</li><li>执行陷入指令</li><li>执行系统调用相应服务程序</li><li>返回用户程序</li></ul></li></ul></li></ul><h2 id="进程的描述和控制"><a href="#进程的描述和控制" class="headerlink" title="进程的描述和控制"></a>进程的描述和控制</h2><h3 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h3><ul><li><p>定义</p><ul><li><p>进程就是一个程序在一个数据集上的一次动态执行过程。进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。</p></li><li><p>我们也可以理解进程是具有一定独立功能的程序在关于某个数据集合上的一次运行活动</p></li><li><p>进程是进程实体的运行过程,是系统进行资源分配和调度的一个独立单位</p></li><li><p>程序</p><ul><li>一个指令序列</li></ul></li></ul></li><li><p>进程实体（进程映像）</p><ul><li><p>PCB（进程控制快）</p><ul><li><p>系统为每一个运行的程序配置一个数据结构，称为进程控制块，用来描述进程的各种信息（如程序代码存放位置）</p></li><li><p>进程描述信息</p><ul><li><p>进程标识符PID</p><ul><li>当进程被创建时，操作系统会为该进程分配一个唯一的，不重复的id，用于区分不同进程</li></ul></li><li><p>用户标识符UID</p></li></ul></li><li><p>进程控制和管理信息</p></li><li><p>资源分配清单</p><ul><li>程序段指针</li><li>数据段指针</li><li>键盘</li><li>鼠标</li></ul></li><li><p>处理机相关信息</p><ul><li>各种寄存器</li></ul></li></ul></li><li><p>程序段</p><ul><li><p>存放要执行的程序代码</p><ul><li>程序本身的运行所需的数据在程序段，数据段中</li></ul></li></ul></li><li><p>数据段</p><ul><li>存放程序运行过程中的各种数据</li></ul></li></ul></li><li><p>组织形成</p><ul><li><p>链接方式</p><ul><li>按进程状态将PCB分成多个队列</li><li>操作系统持有指向各个队列的指针</li></ul></li><li><p>索引方式</p><ul><li>按照进程状态建立几张索引表，各表项指向一个PCB</li><li>操作系统持有指向各个索引表的指针</li></ul></li></ul></li><li><p>特征</p><ul><li><p>动态性</p></li><li><p>并发性</p></li><li><p>独立性</p><ul><li>进程是系统进行资源分配，调度的独立单位</li></ul></li><li><p>异步性</p></li><li><p>结构性</p></li></ul></li></ul><h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><ul><li><p>状态</p><ul><li><p>运行</p><ul><li>占有cpu，且cpu是运行</li></ul></li><li><p>就绪</p><ul><li><p>已经具备运行条件，但是由于没有空闲cpu，而暂时不能运行</p><ul><li>拥有除处理机之外的所有需要的资源，一旦获得处理机即可立刻进入运行态开始运行</li></ul></li></ul></li><li><p>阻塞</p><ul><li>因等待某一事件而暂时不能运行</li></ul></li><li><p>创建</p><ul><li>进程正在被创建，操作系统为进程分配资源，初始化PCB</li></ul></li><li><p>终止</p><ul><li>进程正在从系统中撤销，操作系统会回收进程拥有的资源，撤销PCB</li></ul></li></ul></li><li><p>进程状态间的转换</p><ul><li><p>就绪态&gt;运行态</p><ul><li>进程被调度</li></ul></li><li><p>运行态&gt;就绪态</p><ul><li>时间片到，或者cpu被其他高优先级的进程抢占</li></ul></li><li><p>运行态&gt;阻塞态</p><ul><li>等待系统资源分配，或等待某事件发生（主动行为）</li></ul></li><li><p>阻塞态&gt;就绪态</p><ul><li>资源分配到位，等待时事件发生（被动行为）</li></ul></li><li><p>创建态&gt;就绪态</p><ul><li>系统完成创建进程的工作</li></ul></li><li><p>运行态&gt;终止态</p><ul><li>进程运行结束或运行过程中遇见不看修复的错误</li></ul></li></ul></li></ul><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><ul><li><p>基本概念</p><ul><li><p>进程控制就是要实现进程状态的转换</p></li><li><p>进程转换用原语实现</p><ul><li>原语用关/开中断实现</li><li>原语是一种特殊的程序</li><li>原语的执行必须一气呵成，不可中断</li></ul></li></ul></li><li><p>进程控制相关的原语</p><ul><li><p>进程的创建</p><ul><li><p>创建原语</p><ul><li>申请空白PCB</li><li>为新进程分配所需资源</li><li>初始化PCB</li><li>将PCB插入就绪队列</li></ul></li><li><p>引起进程创建的事件</p><ul><li><p>用户登录</p><ul><li>分时系统中，用户登陆成功，系统会为其建立一个新的进程</li></ul></li><li><p>作业调度</p><ul><li>多道批处理系统中，有新的作业放入内存时，会为其建立一个新的进程</li></ul></li><li><p>提供服务</p><ul><li>用户向操作系统提出某些请求时，会新建一个进程处理该请求</li></ul></li><li><p>应用请求</p><ul><li>由用户进程请求一个子进程</li></ul></li></ul></li></ul></li><li><p>终止</p><ul><li><p>撤销原语</p><ul><li>从PCB集合中找到终止进程的PCB</li><li>若进程正在运行，立刻剥夺cpu，将cpu分配给其他进程</li><li>终止其所有子进程</li><li>将该进程拥有的所有资源归还于父进程或操作系统</li><li>删除PCB</li></ul></li><li><p>引起进程终止的事件</p><ul><li>正常结束</li><li>异常结束</li><li>外界干涉</li></ul></li></ul></li><li><p>阻塞</p><ul><li><p>阻塞原语</p><ul><li>找到阻塞的进程对于的PCB</li><li>保护进程运行现场，将PCB状态信息设置为阻塞态，暂停停止进程运行</li><li>将PCB插入相应事件的等待队列</li></ul></li><li><p>引起进程阻塞的事件</p><ul><li>需要等待系统分配某种资源</li><li>需要等待相互合作的其他进程完成工作</li></ul></li></ul></li><li><p>唤醒</p><ul><li><p>唤醒原语</p><ul><li>在事件对待队列中找到PCB</li><li>将PCB从等到队列移除，设置进程为就绪态</li><li>将PCB插入就绪态，等待被调度</li></ul></li><li><p>引起进程唤醒的事件</p><ul><li>等待的事件发生</li></ul></li></ul></li><li><p>切换</p><ul><li><p>切换原语</p><ul><li>将运行环境信息存入PCB</li><li>PCB移入对应队列</li><li>根据PCB恢复进程所需的运行环境</li></ul></li><li><p>引起进程切换的事件</p><ul><li>当前进程时间片到</li><li>由更高优先级的进程到达</li><li>当前进程自动阻塞</li><li>当前进程终止</li></ul></li></ul></li></ul></li></ul><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><ul><li><p>共享存储</p><ul><li><p>要互斥地访问共享空间</p><ul><li>互斥访问通过操作系统提供的工具实现</li></ul></li><li><p>两种方式</p><ul><li><p>基于存储区的共享（高级）</p><ul><li>在内存里划出一块共享存储区，数据的形式，存放位置都由进程控制，而不是操作系统，这种方式更快</li></ul></li><li><p>基于数据结构的共享（低级）</p><ul><li>例如共享空间里只能放一个长度为10的数组，速度慢，限制多，是一种低级通信方式</li></ul></li></ul></li></ul></li><li><p>信息传递</p><ul><li><p>传递结构化消息（消息头/消息体）</p></li><li><p>系统提供“发送/接受原语”</p></li><li><p>两种方式</p><ul><li><p>间接通信方式</p><ul><li>消息先发送到中间体</li></ul></li><li><p>直接通信方式</p><ul><li>消息直接挂到接收方的消息队列里</li></ul></li></ul></li></ul></li><li><p>管道通信</p><ul><li>设置一个特殊的共享文件（管道），其实就是一个缓冲区</li><li>一个管道只能实现半双工通信，某一时间内只能实现单向的传输</li><li>实现双向同时通信要建立两个管道</li><li>写满时，不能再写。读写时，不能再读</li><li>没写满，不能读。没读空，不能写</li></ul></li></ul><h3 id="线程，多线程模型"><a href="#线程，多线程模型" class="headerlink" title="线程，多线程模型"></a>线程，多线程模型</h3><ul><li><p>定义</p><ul><li><p>轻量级进程</p><ul><li>是一个基本的cpu执行单元，也是程序执行流的最小单位</li></ul></li><li><p>由线程ID、程序计数器、寄存器集合和堆栈共同组成。线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。线程没有自己的系统资源。</p></li></ul></li><li><p>优点（与传统进程机制的对比）</p><ul><li><p>资源分配，处理机调度</p><ul><li>传统进程机制中，进程是资源分配，调度的基本单位</li></ul></li><li><p>并发性</p><ul><li>传统进程机制中，只能进程间并发</li><li>引入线程后，各线程间也能并发，提高了并发度</li></ul></li><li><p>（实现并发的）系统开销</p><ul><li>传统进程间的并发，需要切换进程的运行环境，系统开销很大</li><li>线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，系统开销小</li><li>引入线程后，并发所带来的系统开销减小</li></ul></li></ul></li><li><p>重要属性</p><ul><li>线程是处理机调度的单位，进程是资源分配的单位</li><li>同一进程的各线程共享进程拥有的资源</li><li>同一进程内的线程切换不会导致进程切换</li></ul></li><li><p>线程的实现方式</p><ul><li><p>用户线程</p><ul><li><p>从用户视角看的线程</p><ul><li>线程切换在用户态下完成，不需要操作系统的干预</li></ul></li></ul></li><li><p>内核级线程</p><ul><li>从操作系统视角看到进程（内核级线程才是处理机分配的单位）</li></ul></li><li><p>组合方式</p><ul><li>用户级和内核级的结合</li></ul></li></ul></li><li><p>多线程模型</p><ul><li><p>多对一</p><ul><li><p>优点</p><ul><li>进程管理开销小，效率高</li></ul></li><li><p>缺点</p><ul><li>一个线程阻塞会导致整个进程阻塞，也就是并发度低</li></ul></li></ul></li><li><p>一对一</p><ul><li><p>优点</p><ul><li>各线程可分配到多核处理机并行执行，并发度高</li></ul></li><li><p>缺点</p><ul><li>进程管理开销大</li></ul></li></ul></li><li><p>多对多</p><ul><li>集二者之长</li></ul></li></ul></li></ul><h2 id="处理机调度与死锁"><a href="#处理机调度与死锁" class="headerlink" title="处理机调度与死锁"></a>处理机调度与死锁</h2><h3 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h3><ul><li><p>基本概念</p><ul><li>按某种算法选择一个进程将处理机分配给它</li></ul></li><li><p>三个层次</p><ul><li><p>高级调度（作业调度）</p><ul><li>按照某种规则，从后背队列中选择合适的作业将其调入内存，并为其创建进程（建立PCB）</li></ul></li><li><p>中级调度（内存调度）</p><ul><li>按照某种规则，从挂队列中选择合适的进程将其数据调回内存</li></ul></li><li><p>低级调度（进程调度）</p><ul><li>按照某种规则，从就绪队列中选择一个进程为其分配处理机</li></ul></li></ul></li><li><p>三层调度的联系，对比</p><ul><li><p>高级调度</p><ul><li>外存-&gt;内存（面向作业）</li><li>发生频率：最低</li></ul></li><li><p>中级调度</p><ul><li>外存-&gt;内存（面向进程）</li><li>发生频率：中等</li></ul></li><li><p>低级调度</p><ul><li>内存-&gt;CPU</li><li>发生频率：最高</li></ul></li></ul></li><li><p>为减轻系统负载，提高资源利用率，暂时吧执行的进程会被调到外存从而变成“挂起态”</p></li><li><p>七状态模型：在五状态模型的基础上加入了“就绪挂起”和“阻塞挂起”两种状态</p></li></ul><h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><ul><li><p>时机</p><ul><li><p>场景</p><ul><li><p>主动放弃</p><ul><li>进程正常终止</li><li>运行过程中发生异常而终止</li><li>主动阻塞（如等待I/O）</li></ul></li><li><p>被动放弃</p><ul><li>分给进程的时间片用完</li><li>有更高优先级的进程进入就绪队列</li></ul></li></ul></li><li><p>禁止特例</p><ul><li><p>处理中断的过程中</p><ul><li>中断处理过程复杂，与遇见密切相关，很难做到在中断处理过程中进行进程切换</li></ul></li><li><p>进程在操作系统内核程序临界区中</p></li><li><p>原子操作过程中（原语）</p><ul><li>原子操作不可中断</li></ul></li></ul></li></ul></li><li><p>切换与过程</p><ul><li><p>狭义的“调度”和”切换“的区别</p></li><li><p>切换过程</p><ul><li>对原来运行进程各种数据的保存</li><li>对新的进程各种数据的恢复</li></ul></li><li><p>重要结论：进程调度，切换是有代价的，并不是调度越频繁，并发度就越高</p></li></ul></li><li><p>方式</p><ul><li><p>非剥夺调度方式（非抢占式）</p><ul><li><p>只能有当前运行的进程主动放弃CPU</p><ul><li>早期</li></ul></li></ul></li><li><p>剥夺调度方式（抢占式）</p><ul><li>可由操作系统剥夺当前进程的CPU使用权</li></ul></li></ul></li><li><p>补充知识</p><ul><li><p>临界资源</p><ul><li>一个时间段内只允许一个进程使用的资源，各进程需要互斥的访问临界资源</li></ul></li><li><p>临界区</p><ul><li>访问临界资源的那段代码</li></ul></li><li><p>内核程序临界区</p><ul><li>一般是用来访问某种内核数据结构的，比如进程的就绪队列（由各就绪进程的PCB组成）</li></ul></li><li><p>狭义进程调度</p><ul><li>从就绪队列中选中一个要运行的进程（这个进程可以是刚刚被暂停执行的进程，也可以是另一个进程，后一种情况就需要进程切换）</li></ul></li><li><p>广义的进程调度</p><ul><li>选择一个进程和进程切换</li></ul></li></ul></li></ul><h3 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h3><ul><li><p>CPU利用率</p><ul><li>忙碌时间/总时间</li></ul></li><li><p>系统吞吐量</p><ul><li><p>单位时间内完成作业的数量</p><ul><li>总共完成作业/总共花费时间</li></ul></li></ul></li><li><p>周转时间</p><ul><li><p>周转时间是指从作业被提交给系统到作业完成为止的这段时间间隔</p></li><li><p>分类</p><ul><li><p>周转时间</p><ul><li><p>作业完成时间-作业提交时间</p><p>对于用户来说，更关心自己的单个作业的周转时间</p></li></ul></li><li><p>带权周转时间</p><ul><li><p>各作业周转时间之和/作业数</p><p>对于操作系统来说，更关心系统的整体表现，也就是所有作业周转时间的平均值</p></li></ul></li><li><p>平均周转时间</p><p>作业运行时间和周转时间的差值很影响用户的体验</p><ul><li><p>作业周转时间/作业实际运行的时间</p><ul><li><p>（作业完成时间-作业提交时间）/作业实际运行时间</p><p>带权周转时间必然大于1，且与周转时间一样越小越好</p></li></ul></li></ul></li><li><p>平均带权周转时间</p><ul><li>各作业带权周转时间之和/作业数</li></ul></li></ul></li><li><p>组成</p><ul><li>作业在外存后备队列上等待作业调度（高级调度）的时间</li><li>进程在就绪队列是等待进程调度（低级调度）的时间</li><li>进程在CPU是执行的时间</li><li>进程等待I/o操作完成的时间</li></ul></li></ul></li><li><p>等待时间</p><ul><li>指进程或作业处于等待处理状态时间之和，等待时间越长，用户满意度越低</li><li>对于进程来说，等待时间就是指进程建立后的等待时间，还要加上作业在外存后背队列中等待的时间</li><li>一个作业总需要被CPU服务多久，被I/O设备服务多久一般是确定不变的，因此调度算法其实只会影响作业/进程的等待时间。当然，与前面指标类似，存在“平均等待时间”来评价整体性能</li></ul></li><li><p>响应时间</p><ul><li>用户提交请求到首次产生响应所用的时间</li></ul></li></ul><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><ul><li><p>先来先服务（FCFS）</p><ul><li><p>按照作业/进程到达的先后顺序服务</p></li><li><p>用于作业调度时，考虑的是哪个作业先到达后备队列，用于进程调度时，考虑的是哪个进程先到达就绪队列</p></li><li><p>非抢占式 </p><ul><li>按照到达的先后顺序调度，实际上就是等待时间越久的越优先得到服务</li></ul></li><li><p>优缺点</p><ul><li>公平，算法实现简单</li><li>排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大，对短作业来说，用户体验不好，也就是说FCFS算法对长作业有利，对短作业不利</li></ul></li></ul></li><li><p>短作业优先（SJF）</p><ul><li><p>追求最少的平均等待时间，最少的平均周转时间，最少的平均带权周转时间</p></li><li><p>最短的作业/进程优先得到服务（所谓“最短”，是只要去服务时间最短）</p></li><li><p>可用于作业调度，也可用于进程调度，用于进程调度时称为“短进程（SPF）优先算法“</p></li><li><p>SJF和SPF是非抢占式的算法，但是也有抢占式的版本–最短剩余时间优先算法（SRTN）</p><ul><li><p>每当有进程加入就绪队列改变时就需要调度，如果新到达的进程剩余时间比当前运行的进程剩余时间更短，则由新进程抢占处理机，当前运行进程重新回到就绪队列，同时，当一个进程完成时也需要调度</p><ul><li>无条件的情况下，抢占式的短作业/进程优先调度算法（最短剩余时间优先SRNT算法）的平均等待时间，平均周转时间最少</li></ul></li></ul></li><li><p>在所有进程同时可运行的时候，采用SJF调度算法的平均等待时间，平均周转时间最少</p><ul><li>也就是，在所有进程计划同时到达时，采用SJF调度算法的平均等待时间，平均周转时间最少</li></ul></li><li><p>优缺点</p><ul><li><p>“最短”的平均等待时间，平均周转时间</p></li><li><p>不公平，对短作业有利对长作业不利，由此可能产生“饥饿现象”。另外，作业和进程的运行时间是由用户提供的，并不一定真实，不一定能做到短作业优先</p><ul><li>如果源源不断的短作业/进程到来，可能使长作业/进程长时间得不到服务，产生“饥饿”现象，如果一直得不到服务，则称为“饿死”</li></ul></li></ul></li></ul></li><li><p>高响应比优先（HRRN）</p><ul><li><p> FCFS算法是在每次调度的时候选择一个等待时间最长的作业（进程）为其服务，但是没有考虑到作业的运行时间，因此导致了对短作业不友好。而SJF算法则是选择一个执行时间最短的作业为其服务，但是又完全吧考虑各个作业的等待时间，因此导致了对长作业不友好，甚至还会造成饥饿问题，因此诞生HRRN</p></li><li><p> 要综合考虑作业/进程的等待时间和要去服务时间</p></li><li><p>在每次调度是先计算各个作业/进程的响应比，选择响应比最高的作业/进程为其服务</p><ul><li>响应比=（等待时间+要去服务时间）/要求服务时间【响应比&gt;=1】</li></ul></li><li><p> 可用于作业调度和进程调度</p></li><li><p> 非抢占式的算法，因此只能当前运行的作业（进程）主动放弃CPU处理机时（正常/异常完成，或者主动阻塞），才需要调度，才需要计算响应比，选响应比最高的进程上处理机</p></li><li><p>优点</p><ul><li>考虑了等待时间和运行时间（要去服务时间）</li><li>等待时间相同的，要求服务时间短的优先（SJF优点）</li><li>要去服务时间相同的，等待时间长的优先（FSFS优点）</li><li>对于长作业来说，随着等待时间越来越久，响应比会越来越大，避免饥饿问题</li></ul></li></ul></li><li><p>时间片轮转调度算法（RR）</p><ul><li><p>公平的，轮流的为各个进程服务，让每一进程在一定时间间隔内都可以得到响应</p></li><li><p>按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（如100ms）若进程未在一个时间片内执行完这剥夺处理机，将进程重新放到就绪队列队尾重新排队</p></li><li><p>用于进程调度（只有作业放入内存建立了相应的进程后，才能被分配处理机时间片）</p></li><li><p>若进程未能在时间片内运行完，将被强行剥夺处理机使用权，因此时间片轮转调度算法舒徐抢占式的算法，由时钟装置发出时钟中断来通知CPU时间片已到</p></li><li><p>思考</p><ul><li>若时间片太大，使每一个进程都可以在一个时间片内完成，则时间片轮转调度算法退化为先来先服务调度算法，并且会增大进程响应时间，因此时间片不能太大</li><li>进程调度，切换是有时间代价的（保存，恢复运行环境），因此如果时间片太小，会导致进程切换过于频繁，系统会花大量的时间来处理进程切换，从而导致实际用于进程执行的时间比例减少，可见时间片也不能太少</li></ul></li><li><p>优缺点</p><ul><li>公平，响应快，适用于分时操作系统</li><li>由于高频率的进程切换，因此有一定开销，不区分任务的紧急程度</li></ul></li></ul></li><li><p>优先级调度算法</p><ul><li><p>随着计算机的发展，特别是实时操作系统的的出现，越来越多的应用场景根据任务的紧急程度来决定处理顺序</p></li><li><p>每个作业/进程有各自的优先级，调度时选择优先级最高的作业/进程</p></li><li><p>可用于作业调度，也可用于进程调度，甚至还能用于I/O调度中</p></li><li><p>抢占式，非抢占式</p><ul><li><p>非抢占式只需要进程主动放弃处理机时进行调度，每次调度时选择当前已到达且优先级最高的进程。</p></li><li><p>抢占式还需要在就绪队列变化时，检查是否会发生抢占</p><ul><li><p>就绪队列未必只有一个，可以安装不同的优先级组织，另外，也可以吧优先级高的进程排在更靠近对头的位置根据优先级可以动态改变，可将优先级分为静态优先级和动态优先级</p><ul><li><p>静态优先级</p><ul><li>创建进程时确定，之后不再改变</li></ul></li><li><p>动态优先级</p><ul><li><p>创建进程时有一个初始值，之后会根据情况动态的调整优先级</p><ul><li><p>系统进程优先级高于用户进程</p></li><li><p>前台进程优先级高于后台进程</p></li><li><p>操作系统更偏好I/O型进程（或称为I/O繁忙型进程）</p><p>与之对应的是计算机进程(或者称为CPU繁忙型进程)</p></li><li><p>基于追求公平，提高资源利用率等角度考虑，如果某进程在就绪队列中等待了很长时间，则可以适当提升其优先级反之占用处理机很长的可以适当降低其优先级</p></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>优缺点</p><ul><li>用优先级区分紧急程度，重要程度，适用于实时操作系统。可灵活的调整对各作业/进程的偏好程度</li><li>若源源不断的有高优先级进程到来，则可能导致饥饿</li></ul></li></ul></li><li><p>多级反馈队列调度算法</p><ul><li><p>规则</p><ul><li>设置多级就绪队列，各级队列优先级从高到低，时间片从小到大</li><li>新进程到达时，先进入第一级队列，按FCFS原则排队等待被分配时间片，若用完时间片进程还未结束，则进程进入下一级队列对位，如果此时已经是最下级的队列，则重新放回队列队尾</li><li>只有第K级队列为空时，才会为K+1级对头的进程分配时间片</li></ul></li><li><p>抢占式</p><ul><li>在K级队列的进程运行过程中，若更上级的多列（1~K-1级）中进入了一个新进程，则由新进程处于优先级更高的队列中，因此新进程会抢占处理机，原来运行的进程放回K级队列队尾</li></ul></li><li><p>优缺点</p><ul><li><p>对各类型进程相对公平（FCFS的优点）</p></li><li><p>每个新到达的进程都可以很快的得到响应（RR的优点）</p></li><li><p>短进程只用较少的时间就可完成（SPF的优点）</p></li><li><p>不必实现估计进程的运行时间（避免用户作假）</p></li><li><p>可灵活的调整对各类进程的偏好程度，比如CPU密集型进程,I/O密集型进程</p><p>可以将因I/O而阻塞的进程重新放回原队列，这样I/O型进程就可以保存较高的优先级</p></li></ul></li></ul></li></ul><h3 id="同步-互斥"><a href="#同步-互斥" class="headerlink" title="同步/互斥"></a>同步/互斥</h3><ul><li><p>进程同步</p><ul><li>直接制约关系，是指为完成某种任务而建立两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生制约关系，进程间的制约关系就是源于它们之间的相互合作</li></ul></li><li><p>进程互斥</p><ul><li><p>一段时间内只允许一个进程使用的资源称为临界资源，许多物理设备（摄像头等）都属于临界资源，此外还有许多变量，数据，内存缓冲区都属于临界资源</p></li><li><p>逻辑组成</p><ul><li><p>进入区</p><ul><li>负责检查是否可以进入临界区，若可进入，则设置正在访问临界资源的标准，阻止其他进程同时进入临界区</li></ul></li><li><p>临界区（临界段）</p><ul><li>访问临界资源的代码</li></ul></li><li><p>退出区</p><ul><li>负责解除正在访问临界资源的标准</li></ul></li><li><p>剩余区</p><ul><li>做其他处理</li></ul></li></ul></li><li><p>原则</p><ul><li><p>空闲让进</p><ul><li>临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区</li></ul></li><li><p>忙则等待</p><ul><li>当已有进程进入临界区时，其他试图进入临界区的进程必须等待</li></ul></li><li><p>有限等待</p><ul><li>对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿）</li></ul></li><li><p>让权等待</p><ul><li>当进程不能进入临界区时，应立即释放处理机，防止进程忙等待</li></ul></li></ul></li><li><p>临界资源</p><ul><li>对于临界资源的访问必须互斥的进行</li></ul></li></ul></li></ul><h3 id="同步-互斥的实现方法"><a href="#同步-互斥的实现方法" class="headerlink" title="同步/互斥的实现方法"></a>同步/互斥的实现方法</h3><ul><li><p>软件方式</p><ul><li><p>单标志法</p><ul><li><p>在进入区只做检查不上锁，在退出区把临界区的使用权转交给另一个进程</p><ul><li><p>两个进程在访问完临界区后会把使用临界区的权限转交给另一个进程。也就是每个进程进入临界区的权限只能被另一个进程赋予</p><ul><li>该算法可以实现“同一时间最多指允许一个进程访问临界区”</li></ul></li></ul></li><li><p>违背空闲让进原则</p></li></ul></li><li><p>双标志先检查</p><ul><li><p>先在进入区检查后上锁，退出区解锁</p><ul><li>设置一个布尔类型数组flag[]，数组中的每个元素用来标记各进程想进入临界区的意愿（flag[0]=true表示0号进程P0现在想进入临界区。)每个进程在临界区之前先检查当前有没有别的进程想进入临界区，如果没有，则把自身对应标识flag（i）改成true，之后开始访问临界区</li></ul></li><li><p>违反忙则等待</p><ul><li>因为进入区的检查和上锁两个处理不是一气呵成的，检查后，上锁前可能发生进程切换</li></ul></li></ul></li><li><p>双标志后检查</p><ul><li><p>在进入区先上锁后检查，在退出区解锁</p><ul><li>双标志先检查法的改版，之前的问题是先检查后上锁，但是无法一气呵成，因此导致两个进程同时进入临界区的问题，所以使用先上锁后检查的方法避免上述问题</li></ul></li><li><p>违反空闲让进和有限等待原则</p></li></ul></li><li><p>peterson算法</p><ul><li><p>进入区;1.主动争取;2.检查对方是否也想使用，而且最后一次是否是自己说了主动让出 </p><ul><li>在双标准后检查方法后，如果双方都争着想进入临界区，可以尝试让进程主动让对方使用临界区</li></ul></li></ul></li></ul></li><li><p>硬件方式</p><ul><li><p>中断屏蔽方法</p><ul><li><p>利用开/关中断指令实现</p><ul><li>关中断后不允许当前进程被中断，必然不会发生进程切换</li><li>当前进程访问完临界区再执行开中断指令才可能有别的进程上处理机并访问临界区</li></ul></li><li><p>优缺点</p><ul><li>简单高效</li><li>不适用多处理机，只适合操作系统内核进程，不适用进程用户进程（因为开/关中断只能运行在内核态，这组指令如果能让用户随意进入会很危险）</li></ul></li></ul></li><li><p>TesAndSet指令（TS指令或TSL指令）</p><ul><li><p>用硬件实现的，执行的过程中不允许被中断，只能一气呵成，</p><p>布尔类型lock表示当前临界区是否被上锁<br>bool TestAndSet(bool *lock){</p><pre><code>bool old;old = *lock;*lock = true;return old;</code></pre><p>}<br>TSL实现互斥<br>while(TestAndSet(&amp;lock));<br>临界区代码<br>lock = false;<br>剩余区代码</p><ul><li>若刚开始lock是false，则TSL返回old的值为false，whlie循环条件不满足，直接跳过循环，进入临界区，反之则会一直循环直到当前访问临界区的进程退出区进行解锁</li></ul></li><li><p>优缺点</p><ul><li>实现简单，无需严格检查是否有逻辑漏洞，适用于多处理机</li><li>不满足让权等待原则，暂时无法进入临界区的进程会占cpu并循环执行TSL指令，导致忙等</li></ul></li></ul></li><li><p>Swap指令（Exchange或XCHG指令）</p><ul><li><p>用硬件实现的，执行的过程中不允许被中断，只能一气呵成，</p><p>Swap(bool *a,bool *b){</p><pre><code>bool temp;temp = *a;*a = *b;*b = temp;&#125;</code></pre><p>bool old = true;<br>while(old = true);</p><pre><code>Swap(&amp;lock,&amp;old);</code></pre><p>临界区代码<br>lock = flase;<br>剩余区代码</p><ul><li>从逻辑上Swap和TSL吗什么区别，都是先记录临界区是否上锁再将上锁标记lock设置为true，最后检查old，如果old为false则之前没有别的检查多临界区上锁，则可跳出循环进入临界区</li></ul></li><li><p>优缺点</p><ul><li>实现简单，无需严格检查是否有逻辑漏洞，适用于多处理机</li><li>不满足让权等待原则</li></ul></li></ul></li></ul></li></ul><h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><ul><li><p>分类</p><ul><li><p>整型信号量</p><ul><li><p>用一个整数型变量作为信号量，用来表示系统中某种资源的数量</p></li><li><p>与普通整数变量的区别</p><ul><li>初始化，P操作，V操作</li></ul></li><li><p>检查和上锁一气呵成，避免了并发，异步导致的问题</p></li><li><p>存在不满足让权等待原则，故会发生忙等问题</p></li></ul></li><li><p>记录型信号量</p><ul><li>用记录型数据结构表示的信号量</li></ul></li></ul></li><li><p>用户进程可以通过使用操作系统提供的一对原语来对信号量进行操作，从而很方便的实现了进程互斥，同步问题</p><ul><li><p>信号量就是严格变量（可以是整数或者更为复杂的记录型变量）可以用一个信号量来表示系统中某种资源的数量</p></li><li><p>wait（s）原语P(s)和signal(s)原语V(s)也就是P，V操作，实现系统资源的申请和释放</p><ul><li>对信号量S的一次P操作意味着进程请求一个得单位的该资源，因此需要执行S.value，表示该资源数减一，当S.value&lt;0时表示该资源分配完毕，因此进程应该调用block原语进行自我阻塞，主动放弃处理机，并插入该类资源的等待队列S.L中。反之V操作则是释放一个并S.value++，唤醒一个进程。因此，该机制遵循了让权等待原则，也就不会产生忙等现象</li><li>S.value的初值表示系统中某种资源的数量</li></ul></li></ul></li><li><p>作用</p><ul><li><p>实现进程互斥</p><ul><li><p>操作</p><ul><li>分析并发进程的关键活动，划分临界区</li><li>设置互斥信号量mutex，初值为1</li><li>在临界区之前执行P(mutex)</li><li>在临界区之后执行V(mytex)</li></ul></li><li><p>注意</p><ul><li>对于不同的临界资源需要设置不同的互斥信号量</li></ul></li></ul></li><li><p>实现进程同步</p><ul><li><p>操作</p><ul><li>分析需要实现同步关系的地方，也就是必须保证一前一后执行的两个操作</li><li>设置同步信号量S，初始值为0</li><li>在前操作之后执行V(S)</li><li>在后操作之前执行P(S)</li></ul></li></ul></li><li><p>实现进程的前驱关系</p><ul><li>每一对前驱关系都是一个进程同步问题（需要保证一前一后的操作）</li><li>要为每一对前驱关系各设置一个同步变量</li><li>在前操作之后对相应的同步变量执行V操作</li><li>在后操作之前对相应的同步变量执行P操作</li></ul></li></ul></li></ul><h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><ul><li><p>原因</p><ul><li>信号量机制存在编写程序困难，易出错</li><li>为了减轻程序员对pv操作的工作量，让写代码更轻松，所以引入一种高级同步机制–管程</li></ul></li><li><p>管程是一种特殊的软件模块，其组成成分为</p><ul><li>局部于管程的共享数据结构说明</li><li>对该数据结构进行操作的一组过程</li><li>对局部于管程的共享数据结构设置初始值的语句</li><li>管程有一个名字</li></ul></li><li><p>基本特征</p><ul><li>局部于管程的数据只能被局部于管程的过程所访问</li><li>一个进程只有通过管程内的过程才能进入管程访问共享数据</li><li>每次只允许一个进程在管程内执行某个内部过程</li></ul></li></ul><h3 id="死锁，饥饿，死循环"><a href="#死锁，饥饿，死循环" class="headerlink" title="死锁，饥饿，死循环"></a>死锁，饥饿，死循环</h3><ul><li><p>死锁</p><ul><li><p>各进程相互等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象</p></li><li><p>发生条件</p><ul><li><p>互斥条件</p><ul><li>只有对必须互斥使用的资源的争抢才会导致死锁</li></ul></li><li><p>不剥夺条件</p><ul><li>进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放</li></ul></li><li><p>请求和保持条件</p><ul><li>进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放</li></ul></li><li><p>循环等待条件</p><ul><li>存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求</li><li>发生死锁时一定有循环等待，但是发生循环等待时未必死锁</li></ul></li><li><p>例</p><ul><li><p>对系统资源的竞争。</p><ul><li>各进程对不可剥夺的资源的竞争可能会引起死锁，对可剥夺（cpu）的竞争是不会引起死锁的</li></ul></li><li><p>进程推进顺序非法，</p><ul><li><p>请求和释放资源的顺序不当，也同样会导致死锁</p><ul><li>例如：并发执行的进程p1,p2分别申请并占有了R1，R2之后进程P1又紧接着申请资源R2，而进程P2哟申请了资源R1，两者会因为申请的资源被对方占有而阻塞，从而发生死锁</li></ul></li></ul></li><li><p>信号量的使用不当也会造成死锁。</p></li></ul></li></ul></li><li><p>处理策略</p><ul><li><p>静态策略：预防死锁</p><ul><li><p>破坏死锁产生的四个必要条件中的一个或几个</p><ul><li><p>破坏互斥条件</p><ul><li><p>把只能互斥使用的资源改造成允许共享使用，则系统不会进入死锁状态</p><ul><li>SPOOLing技术，操作系统可以使用该技术把独占设备在逻辑上改造成共享设备。比如，用SPOOLing技术把打印机改造成共享设备</li></ul></li></ul></li><li><p>破坏不可剥夺条件</p><ul><li><p>当某个进程请求新的资源得不到满足时，它必须离开释放保持的所有资源，待以后需要时再重新申请。也就是说即使某些资源尚为用完，也需要主动释放，从而破坏了不可剥夺条件</p></li><li><p>当某个进程需要的资源被其他的进程所占有的时候，可以由操作系统协助，将想要的资源强行剥夺。这种方式一般需要考虑各进程的优先级</p></li><li><p>缺点</p><ul><li>实现起来比较复杂</li><li>释放已获资源可能会使前一阶段的工作失效，因此这种方法一般适用于易保存和恢复状态的资源（CPU）</li><li>反复申请和释放资源会增加系统开销，降低系统吞吐量</li><li>采用第一种方案，意味着只要暂时得不到某个资源，之前获得的那些资源就都要放弃，以后重新申请，如果一直这样会产生进程饥饿</li></ul></li></ul></li><li><p>破坏请求和保持条件</p><ul><li><p>采用静态分配方法</p><ul><li>既进程在运行前一次申请完它所需要的全部资源，在它的资源为满足前，不让它投入运行，一旦投入运行后，这些资源就一直归它所有，该进程就不会再请求别的任何资源</li></ul></li><li><p>缺点</p><ul><li>有些资源可能只需要使用很短的时间，因此如果运行的整个过程期间都一直保持着所有的资源，就会造成严重的资源浪费，资源利用率极低，另外，该策略有有可能会导致某些进程饥饿</li></ul></li></ul></li><li><p>破坏循坏等到条件</p><ul><li><p>采用顺序资源分配法。首先给系统中的资源编号，规定每一个进程必须按编号递增的顺序请求资源，同类资源（即编号相同的资源）一次申请完</p></li><li><p>缺点 </p><ul><li>不方便增加新的设备，因此可能需要重新分配所有的编号</li><li>进程实际使用资源的顺序可能和编号递增顺序不一样，会导致资源浪费</li><li>必须按规则次序申请资源，用户编程麻烦</li></ul></li></ul></li></ul></li></ul></li><li><p>动态策略：避免死锁</p><ul><li><p>用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法***）</p><ul><li><p>安全序列</p><ul><li>如果系统按照某种序列分配资源，每个进程都可以顺利完成，则为安全序列。只要找到一个安全序列，系统就是安全状态，当然安全状态可能有多个。</li><li>系统进入安全状态就一定不会发生死锁</li></ul></li><li><p>系统的不安全状态</p><ul><li>如果分配了资源之后，系统中找不出任何一个安全序列，则系统进入了不安全状态，也就是之后可能所有的进程都无法顺利执行下去。若有进程提前归还一些资源，那么系统可能可以重新回到安全状态。</li><li>系统进入不安全状态就有可能发生死锁，不安全状态不一定发生死锁，但是死锁一定发生在不安全状态下</li></ul></li><li><p>避免进入不安全状态（银行家算法）</p><ul><li><p>核心思想</p><ul><li>在资源分配之前预先判断这次分配是否会导致系统进入不安全状态，以此来决定是否答应资源分配请求</li></ul></li><li><p>过程</p><ul><li><p>假设系统中有n给进程，m种资源，每个进程在运行前先声明对各种资源的最大需求数，则可用一个N*M的矩阵（可用二维数组实现）表示所有进程对各种资源的最大需求数</p></li><li><p>不妨成为最大需求矩阵Max，Max[i,j]=k表示进程Pi最多需要K给资源Rj</p></li><li><p>同理，系统可以用一个n*m的分配矩阵Allocation表示对所有进程的资源分配情况Max-Allocation=Need矩阵，表示各进程最多还需多少各类资源。</p></li><li><p>另外还要用一个长度为m的一维数组Available表示当前系统中还有多少可用资源。</p></li><li><p>某进程Pi向系统申请资源，可用一个长度为m的一维数组REquest表示本次本次申请的各类资源量</p></li><li><p>可用银行家算法预判本次分配是否会导致系统进入不安全状态</p><p>- </p></li></ul></li><li><p>总结</p><ul><li><p>数据结构</p><ul><li>长度为m的一维数组Available表示还有多少可用资源</li><li>n*m矩阵Max表示进程对资源的最大需求数</li><li>n*m矩阵AIIoction表示已经给各进程分配了多少资源</li><li>Max-AIIocation=Need矩阵表示各进程分配了多少资源</li><li>用长度m的一维数组Request表示进程此次申请的各种资源数</li></ul></li><li><p>银行家算法步骤</p><ul><li>检查此次申请是否超过了之前声明的最大需求数</li><li>检查此时系统剩余的可用资源是否还能满足这次请求</li><li>试探着分配，更改各种数据结构</li><li>用安全性算法检查此次分配是否会导致系统进入不安全状态</li></ul></li><li><p>安全性算法步骤</p><ul><li>检查当前的剩余可用资源是否满足某个检查的最大需求，如果可以，就把该进程加入安全序列，并吧该进程持有的资源全部回收</li><li>不断重复，看最终是否能让所有的进程都加入安全序列</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>死锁的检测和解除</p><ul><li><p>允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施接触死锁</p><ul><li><p>检测</p><ul><li><p>用某种数据结构来保存资源的请求和分配信息</p></li><li><p>提供一种算法，利用上述信息来检测系统是否已进入死锁状态</p></li><li><p>数据结构：资源分配图</p><ul><li><p>两种结点</p><ul><li><p>进程结点</p><ul><li>对于一个进程</li></ul></li><li><p>资源节点</p><ul><li>对于一类资源（可以有多个资源）</li></ul></li></ul></li><li><p>两种边</p><ul><li><p>请求边</p><ul><li><p>进程结点-&gt;资源结点</p><ul><li>表示进程想要申请几个资源</li></ul></li></ul></li><li><p>分配边</p><ul><li><p>资源结点-&gt;进程结点</p><ul><li>表示 已经为进程分配了几个资源</li></ul></li></ul></li></ul></li><li><p>当最终能消除所有边，就说该图是可完全简化的此时一定没有发生死锁</p></li><li><p>当最终不能消除所有边，那么就是发生了死锁，而最终还有边的那些进程就是发生了死锁</p><ul><li>死锁定理</li></ul></li></ul></li></ul></li><li><p>解除</p><ul><li><p>资源剥夺法</p><ul><li>挂起</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>饥饿</p><ul><li>由于长时间得不到想要的资源，某进程无法向前推进的现象（spf算法中，若有源源不断的短进程到来，则长进程将无法得到处理机从而导致饥饿）</li></ul></li><li><p>死循环</p><ul><li>某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑bug导致的，有时是故意设置的</li></ul></li></ul><h2 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a>存储器管理</h2><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><ul><li><p>内存是用于存放数据的硬件，程序执行前需要先放到内存中才能被CPU处理</p><ul><li><p>内存地址</p><ul><li>为了区分各个程序，对内存进行存储单元编写地址</li></ul></li><li><p>存储单元</p><ul><li>内存地址从0开始， 每个地址对应一个存储单元</li></ul></li></ul></li><li><p>进程运行的基本原理</p><ul><li><p>指令的工作原理</p><ul><li>操作码+若干参数（可能包含地址参数）</li></ul></li><li><p>逻辑地址（相对地址）</p></li><li><p>物理地址（绝对地址）</p><ul><li>程序中使用的绝对地址，可在编译或者汇编时给出，也可由程序员直接赋予，通常情况下都是编译或汇编再转换为绝对地址</li></ul></li><li><p>程序运行</p><ul><li><p>编辑源文件</p></li><li><p>编译</p><ul><li>由编译程序将用户源代码编译成若干个目标模块（编译就是把高级语言翻译为机器语言）</li></ul></li><li><p>链接</p><ul><li>由链接程序将编译后形成的一组目标模块，以及所需哭函数链接在一起，形成一个完整的装入模块</li></ul></li><li><p>装入（装载）</p><ul><li><p>由装入程序将装入模块装入内存运行</p></li><li><p>装入1的三种方式来完成逻辑地址到物理地址的转换</p><ul><li><p>绝对装入</p><ul><li>在编译时，如果知道程序将放到内存中的那个位置，编译程序将产生绝对地址的目标代码，装入程序按照装入模块中的地址，将程序和数据装入内存</li><li>只适合单道程序环境</li></ul></li><li><p>静态重定位（可重定位装入）</p><ul><li>编译，链接后的装入模块的地址都是从0开始的，指令中使用的地址，数据存放的地址都是相对于起始位置而言的逻辑地址，可根据内存的当前情况，将装入模块装入到内存的合适地方。装入时对地址进行重定位，将逻辑地址变成物理地址（地址变换是在装入时一次完成的）</li><li>作业装入内存时，必须分配其要去的全部内存空间。如果没有足够的内存，就不能装入该作业。作业一旦进入内存后，在运行期间就不能再移动，也不能再申请内存空间</li></ul></li><li><p>动态重定位（动态运行时装入）</p><ul><li><p>编译，链接后的装入模块地址但是从开始的，装入程序把装入模块装入内存后，并不会立刻把逻辑地址转换为物理地址，而是把地址转换推辞到程序真正要执行时才进行，因此装入内存后所有的地址依然是逻辑地址。这种方式需要一个重定位寄存器的支持</p></li><li><p>重定位寄存器</p><ul><li>存放装入模块存放的起始位置</li><li>并且可将程序分配到不连续的存储区中；在程序运行前只需装入它的部分代码即可投入运行，然后在程序运行期间，根据需要动态申请分配内存。便于程序段的共享，可以向用户提供一个比存储空间大得多的地址空间</li></ul></li><li><p>采用动态重定位时允许程序在内存中发生移动</p></li></ul></li></ul></li></ul></li></ul></li><li><p>三种链接方式</p><ul><li><p>静态链接</p><ul><li>在程序运行之前，先将各目标模块及它们所需要的库函数连接成一个完整的可执行文件（装入模块），之后不在拆开</li></ul></li><li><p>装入时动态链接</p><ul><li>将各目标模块装入内存时。边装入边链接的链接方式</li></ul></li><li><p>运行时动态链接</p><ul><li>在程序执行中需要该目标模块时。才对进行修改和更新，便于现实对目标模块的共享</li></ul></li></ul></li><li><p>三种装入方式</p><ul><li><p>绝对装入</p><ul><li>编译时产生绝对地址</li></ul></li><li><p>可重定义装入（静态重定位）</p><ul><li>装入时将逻辑地址转换成物理地址</li></ul></li><li><p>动态运行时装入（动态重定位）</p><ul><li>运行时将逻辑地址转换为物理地址，需设置重定向寄存器</li></ul></li></ul></li></ul></li><li><p>内存管理</p><ul><li><p>内存空间的分配与回收</p><ul><li><p>操作系统负责内存空间的分配与回收</p></li><li><p>连续分配管理方式</p><ul><li><p>单一连续分配</p><ul><li><p>系统区</p><ul><li>通常位于内存的低地址部分，用于存放操作系统相关数据</li></ul></li><li><p>用户区</p><ul><li><p>存放用户进程相关数据</p></li><li><p>内存中只能有一道用户程序，用户程序独占整个用户区空间</p></li><li><p>优缺点</p><ul><li>实现简单，无外部碎片；可采用覆盖技术扩充内存，不一定需要采用内存保护</li><li>只能用于单用户，单任务的操作系统中，有内部碎片，存储器利用率极低</li></ul></li></ul></li></ul></li><li><p>固定分区分配</p></li><li><p>动态分区分配</p></li></ul></li><li><p>非连续分配管理方式</p></li></ul></li><li><p>内存空间的扩展</p><ul><li><p>操作系统需要提供某种技术从逻辑上对内存空间进行扩充</p></li><li><p>覆盖技术</p><ul><li><p>把程序分成多个段（多个模块）</p><ul><li>常用的段常驻内存</li><li>不常用的段在需要时调入内存</li></ul></li><li><p>若干个覆盖区</p><ul><li>不常用的段放在覆盖区，需要用的时候调入内存，用不到时调出内存</li><li>不可能同时被访问程序段共享一个覆盖区</li></ul></li><li><p>一个固定区</p><ul><li>存放最活跃的程序段</li><li>需要常驻内存的段放在固定区中，调入后就不再调出（除非运行结束）</li></ul></li><li><p>必须由程序员声明覆盖结构，操作系统完成自动覆盖</p></li><li><p>对用户不透明，增加了用户编程负担</p></li></ul></li><li><p>交换技术</p><ul><li><p>内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换人内存（进程在内存与磁盘间动态调度）</p></li><li><p>具有交换功能的操作系统中，通常把磁盘空间分为文件区和对换区</p><ul><li><p>文件区</p><ul><li>只要存放文件，追求存储空间的利用率，因此对文件的管理采用离散分配方式</li></ul></li><li><p>对换区</p><ul><li>只占磁盘空间的小部分，被换出的进程数据就存放在对换区</li><li>对换的速度直接影响到系统的整体速度，因此对换区空间的管理主要追求换出速度因此对换区采用连续分配方式</li><li>对换区I/O速度更快</li></ul></li></ul></li><li><p>交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低而暂停。</p><ul><li>在许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一些进程。如果缺页率明显下降，就可以暂停换出</li></ul></li><li><p>可优先换出阻塞进程，可换出优先级低的进程，为防止优先级低的进程在被调入内存后很快又被换出，有些系统还会考虑进程在内存的驻留时间</p></li></ul></li></ul></li><li><p>地址转换</p><p>为了使编程更方便，程序员写程序时应该只需要关注指令，数据的逻辑地址，而逻辑地址到物理地址的转换（这个过程称为地址重定位）应该由操作系统负责，这样就保证了程序员写程序时不需要关注物理内存的实际情况</p><ul><li>操作系统需要提供地址转换功能，复制程序的逻辑地址与物理地址的转换</li></ul></li><li><p>内存保护</p><ul><li><p>操作系统需要提供内存保护功能。保证各进程在各自存储空间内运行，互不干扰</p><ul><li>在CPU中设置一对上，下限寄存器，存放进程的上下限地址。进程的指令要访问某个地址时，CPU检查是否越界</li><li>采用重定位寄存器（基址寄存器）和界地址寄存器（限长寄存器）进行越界检查。重定位寄存器中存放的进程是起始物理地址。界地址寄存器中存放的是进程的最大逻辑地址</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习操作系统时的笔记</summary>
    
    
    
    <category term="学习" scheme="http://jaik.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="笔记" scheme="http://jaik.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="操作系统" scheme="http://jaik.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法的使用以及环境搭建</title>
    <link href="http://jaik.top/2021/06/13/MarkDown%E8%AF%AD%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://jaik.top/2021/06/13/MarkDown%E8%AF%AD%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-06-13T13:32:00.000Z</published>
    <updated>2021-06-13T13:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前有推荐使用MarkDown博客写博客，因为它实在是太好用了。强烈推荐给经常码字或者对文字排版有要求的朋友。</p><p>下面是我经常会用到的语法</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">-------------正文开始-----------------------</span><br><span class="line"></span><br><span class="line">==（1）软件使用==</span><br><span class="line"></span><br><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 六级标题</span></span><br><span class="line"></span><br><span class="line">==（2）字体==</span><br><span class="line"></span><br><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*斜体加粗<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">~~删除~~</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">==高亮==</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">我是^不是人上人（上标）^</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">我是~也不下贱（下标~</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">==（3）列表==</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">+ 看什么看</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">  + 看明白了吗？</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">    + 看明白了！</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">      + 那就动手打一打啊</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">1. 语法很简单，不需要什么计算机基础，一悲这种小白都可以</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">2. 支持Markdown的软件可以随意更换，不存在什么版本不兼容问题</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">3. 我记得很多平台都支持</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">4. 当然，最推荐的还是Typora</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">==（4）表格==</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">| Mon    | TUE    | WED    | </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">| ------ | ------ | ------ | </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">| 一悲   | 二悲   | 三悲   |</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">| 奶茶 | 咖啡 | 圣代 | </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">==（5）引用==</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">&gt;鲁迅说过</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">&gt;&gt;放他娘的屁</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">&gt;&gt;&gt;钱钟书说</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">&gt;&gt;&gt;&gt;鲁迅文章是写得不错</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">==（6）分割线==</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">---------------------</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">==（7）代码==</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">`我是代码`</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">```</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">hello,world</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">```</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br></pre></td></tr></table></figure><h5 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h5><p>受朋友推荐，并一直延用至今的MarkDown编译器是<a href="https://www.typora.io/">Typora</a></p><p>Typora gives you a seamless experience as both a reader and a writer. It removes the preview window, mode switcher, syntax symbols of markdown source code, and all other unnecessary distractions. Instead, it provides a real live preview feature to help you concentrate on the content itself.—–Typora</p><h5 id="体验优化"><a href="#体验优化" class="headerlink" title="体验优化"></a>体验优化</h5><p>如果说用Markdown语法写博客的话，就很难避免在文章中插入图片，而Typora插入的是本地地址，一旦上传到博客上就会无法访问，所有我们会使用外链（请自行了解图片外链）</p><p>而我使用的是<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>，是基于Electron-vue 开发的软件支持多平台图床。</p><p><strong>对应自己的版本下载</strong></p><p><img src="https://i.loli.net/2021/06/13/bstQGCJHYj9FXzM.png" alt="image-20210613224650641"></p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>图床的话有很多，我比较常用的是<a href="https://imgur.com/">Imgur</a>和<a href="https://sm.ms/">SM.MS</a>和一些私家小图床，这里我选择<a href="https://sm.ms/">SM.MS</a>来演示。什么？为什么？因为它提供的免费服务够用，访问速度也还行。倒不是没钱，主要是……<code>没钱</code>。</p><ul><li><p><strong>第一步</strong></p><p>当然是注册，直接略过</p></li><li><p><strong>第二步</strong></p></li></ul><p><img src="https://i.loli.net/2021/06/14/2RZPjaAUWIGpMkg.png" alt="image-20210614104246791"></p><p><img src="https://i.loli.net/2021/06/14/ImqE4PeWGhKoAL5.png" alt="image-20210614104539152"></p><ul><li><strong>第三步</strong>配置PicGo</li></ul><p><img src="https://i.loli.net/2021/06/14/StjTNRlPfKVw1Jr.png" alt="image-20210614104717024"></p><p>在Github中下载<a href="https://github.com/xlzy520/picgo-plugin-smms-user">smms-user</a>插件</p><p><img src="https://i.loli.net/2021/06/14/fgH9VxPQjFeRGq8.png" alt="image-20210614104932734"></p><p>下载完成后解压，文件夹重命名为smms-user，然后点击右上角的导入本地插件访问到该文件夹即可。</p><p><img src="https://i.loli.net/2021/06/14/Mrq5K72CLk3vNna.png" alt="image-20210614105253294"></p><p>在图床设置里找到SM.MS图床，把刚刚保留是Token输入</p><p><img src="https://i.loli.net/2021/06/14/A4G7DR5tcdq8TV1.png" alt="image-20210614105443855"></p><ul><li><strong>第四步</strong>连接Typro<br>按照下图找到全局图像设置</li></ul><p><img src="https://i.loli.net/2021/06/14/C9JAVG3T5bFnMw7.png" alt="image-20210614110907457"></p><p>  接着如图</p><p>  <img src="https://i.loli.net/2021/06/14/bMagrClhLR1vyeE.png" alt="image-20210614110321887"></p><p>测试成功就已经搭建好了，可以非常愉快的使用了<br>使用GitHub做图床示例：<br><img src="https://raw.githubusercontent.com/JaikChen/JaikImage/master/5d93b4bb65ad59d169fc9a0f8b1fa0f8.png" alt="gitub"></p>]]></content>
    
    
    <summary type="html">关于MarkDown基本语法的笔记以及编译器Typora图床工具PicGo的使用</summary>
    
    
    
    <category term="记录" scheme="http://jaik.top/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="笔记" scheme="http://jaik.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MarkDown" scheme="http://jaik.top/tags/MarkDown/"/>
    
    <category term="PicGo" scheme="http://jaik.top/tags/PicGo/"/>
    
    <category term="Typora" scheme="http://jaik.top/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>动手制作一个简单的色图API</title>
    <link href="http://jaik.top/2021/06/07/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87api/"/>
    <id>http://jaik.top/2021/06/07/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87api/</id>
    <published>2021-06-07T14:07:00.000Z</published>
    <updated>2021-06-07T14:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>自从买了服务器就想整点什么，但自己又猜的出奇，就东拼西凑的去整一些有的没的，然后就整了一个简单的<a href="http://cleever-chen.com/API/index.php">色图api</a>。</p><h1 id="动手操作"><a href="#动手操作" class="headerlink" title="动手操作"></a>动手操作</h1><p>其实原理很简单，可以在先建一个文件夹，姑且命名为api，然后在文件夹里建个index.php的文件，用记事本打开里面放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//用来存放外链的文件名，例如：img.txt</span><br><span class="line">//不懂外链请自行了解</span><br><span class="line">$filename = &quot;img.txt&quot;;</span><br><span class="line">if(!file_exists($filename))&#123;</span><br><span class="line">    die(&#x27;文件并不存在，请添加&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//从该文本里获取外联</span><br><span class="line">$pics = [];</span><br><span class="line">$fs = fopen($filename, &quot;r&quot;);</span><br><span class="line">while(!feof($fs))&#123;</span><br><span class="line">    $line=trim(fgets($fs));</span><br><span class="line">    if($line!=&#x27;&#x27;)&#123;</span><br><span class="line">        array_push($pics, $line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//使用数组随机获取链接（方法不唯一）</span><br><span class="line">$pic = $pics[array_rand($pics)];</span><br><span class="line"> </span><br><span class="line">//返回指定格式</span><br><span class="line">$type=$_GET[&#x27;type&#x27;];</span><br><span class="line">switch($type)&#123;</span><br><span class="line"> </span><br><span class="line">//JSON返回</span><br><span class="line">case &#x27;json&#x27;:</span><br><span class="line">    header(&#x27;Content-type:text/json&#x27;);</span><br><span class="line">    die(json_encode([&#x27;pic&#x27;=&gt;$pic]));</span><br><span class="line"> </span><br><span class="line">default:</span><br><span class="line">    die(header(&quot;Location: $pic&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存后新建一个文件夹img.txt（可以是你自己定义的名字）里面每一排放置一个图片外链，最后将整个api的文件夹上传到你网站目录，打开之后就会出现随机图啦！ 当然，<a href="http://cleever-chen.com/API/index.php">一悲从不ghs</a>。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>别问为什么标签是美丽图片而不是色图</p>]]></content>
    
    
    <summary type="html">使用图床制作一个简单的图片API</summary>
    
    
    
    <category term="记录" scheme="http://jaik.top/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="美丽图片" scheme="http://jaik.top/tags/%E7%BE%8E%E4%B8%BD%E5%9B%BE%E7%89%87/"/>
    
    <category term="API" scheme="http://jaik.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://jaik.top/2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://jaik.top/2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2021-05-22T06:01:00.000Z</published>
    <updated>2021-05-22T06:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>是一个将分散的，具有独立功能的计算机系统，通过通信设备与线路链接起来，由功能完善的软件实现资源共享和信息传递</li></ul><p>也就是计算机网络主要是由一些通用的，可编程的硬件相连而成的，而这些硬件并不是为了实现专门的某一特定目的，即这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用，所以说连接进入计算机网络的硬件的不仅仅是一般的计算机，也包括智能手机，同时亦如定义所说，硬件是用来支持多种应用的，而并不是专门传输数据</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>互联</p><ul><li>互联互通，通信链路</li></ul></li><li><p>自治</p><ul><li>无主从关系</li></ul></li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li><p>数据通信</p></li><li><p>资源共享</p></li><li><p>分布式处理</p><p>类似Hadoop平台，（git大概也是分布式？？）</p></li><li><p>提高可靠性</p></li><li><p>负载均衡</p></li></ul><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><ul><li><p>按照作用范围分类</p><ul><li>局域网</li><li>广域网</li><li>城域网</li><li>个人区域网</li></ul></li><li><p>按照使用者分类</p><ul><li>公用网</li><li>专用网</li></ul></li><li><p>按拓扑结构分类</p><ul><li>总线型</li><li>星型</li><li>环型</li><li>网状型</li></ul></li><li><p>接入网</p></li><li><p>按传输技术分类</p><ul><li><p>广播式网络</p><ul><li>共享公共通信信道</li></ul></li><li><p>点对点网络</p><ul><li>使用分组存储转发和路由选择机制</li></ul></li></ul></li><li><p>按交换技术分类</p><ul><li><p>电路交换</p><ul><li><p>优点</p><ul><li>通信时延小</li><li>有序传输</li><li>没有冲突</li><li>实时性强</li></ul></li><li><p>缺点</p><ul><li>建立连接时间长</li><li>线路独占，使用效率低</li><li>灵活性差</li><li>无差错控制能力</li></ul></li></ul></li><li><p>报文交换</p><ul><li><p>优点</p><ul><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率较高</li><li>多目标服务</li></ul></li><li><p>缺点</p><ul><li>有存储转发时延</li><li>报文大小不定，需要网络节点较大缓存空间</li></ul></li></ul></li><li><p>分组交换</p><ul><li><p>优点</p><ul><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率较高</li><li>相较于报文交换，存储管理更容易</li></ul></li><li><p>缺点</p><ul><li>有存储转发时延</li><li>需要传输额外的信息量</li><li>对乱序到目的主机时，要对分组重新排序</li></ul></li></ul></li></ul></li></ul><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li><p>协议</p><p>协议应该是一系列的规则和约定的集合</p><ul><li><p>语法</p><ul><li>数据与控制信息的结构或格式</li></ul></li><li><p>语义</p><ul><li>需要发出何种控制信息</li></ul></li><li><p>同步</p><ul><li>事件实现顺序的详细说明</li></ul></li></ul></li><li><p>软件</p></li><li><p>硬件</p></li></ul><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><ul><li><p>边缘部分</p><p>处在边缘部分的就是连接互联网的主机，也被称为端系统</p><ul><li><p>用户直接使用C/S方式</p><p>客户是服务请求方，服务器是服务提供方，同时所谓的客户和服务器都是指计算机进程（软件）</p></li><li><p>P2P方式</p></li></ul></li><li><p>核心部分</p><ul><li><p>为边缘部分服务，要向网络边缘的主机提供连通性，是边缘部分的主机都可以与其他主机通信。</p><ul><li>其中起到特殊作用的就是路由器</li></ul></li></ul></li></ul><h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul><li><p>速率</p><ul><li>数据率、比特率</li><li>连接在计算机网络上的主机在数字信道是传送数据的传送速率</li><li>10bit/s</li></ul></li><li><p>带宽</p><ul><li><p>原意（频域）</p><ul><li><p>某个信号具有的频带宽度</p><p>某个信号具有的频带宽度，也就是最高频率与最低频率之差，单位赫兹（Hz）</p></li></ul></li><li><p>某通道传送数据的能力（时域）</p><p>网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的最高数据率</p></li></ul></li><li><p>吞吐量</p><ul><li>单位时间内通过某个网络（信道，接口）的数据量    b/s</li></ul></li><li><p>时延</p><ul><li><p>数据（报文/分组/比特流）从网络（链路）的一端传送到另一端所需要的时间，也叫做延迟或者迟延，单位s</p><p>- </p></li></ul></li><li><p>时延带宽积</p><ul><li><p>传播时延X带宽</p><ul><li><p>以比特为单位的链路长度</p><p>某段链路现在有多少比特</p></li></ul></li></ul></li><li><p>往返时间RTT</p><ul><li><p>从发送方发送数据开始，到发送方接收到接收方的确定总共经历的时延</p><ul><li>往返传播时延</li><li>末端处理时间</li></ul></li></ul></li><li><p>利用率</p><ul><li>信道利用率</li><li>网络利用率</li></ul></li></ul><h3 id="非性能特征"><a href="#非性能特征" class="headerlink" title="非性能特征"></a>非性能特征</h3><ul><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可扩展性</li><li>可升级性</li><li>管理和维护</li></ul><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><ul><li><p>目的</p><ul><li>为了解决计算机网络复杂的大问题，按功能分层结构，支持异构网络系统的互联互通</li></ul></li><li><p>数据通信基础知识</p><ul><li><p>典型的数据通信模型</p></li><li><p>三种通信方式（信道）</p><ul><li>单工</li><li>半双工</li><li>双工</li></ul></li><li><p>两种数据传输方式</p><ul><li>串行</li><li>并行</li></ul></li><li><p>术语</p><ul><li><p>数据</p></li><li><p>信号</p><ul><li>数字信号</li><li>模拟信号</li></ul></li><li><p>码元</p></li><li><p>信源</p></li><li><p>信道</p><ul><li><p>传输信号分类</p><ul><li>模拟信道（传送模拟信号）</li><li>数字信道（传送数字信号）</li></ul></li><li><p>传输介质分类</p><ul><li>无线信道</li><li>有线信道</li></ul></li></ul></li><li><p>信宿</p></li><li><p>速率</p><ul><li>码元传输速率</li><li>信息传输速率</li></ul></li><li><p>波特</p></li><li><p>带宽</p><ul><li>最高数据率</li></ul></li></ul></li><li><p>编码与调制</p><ul><li><p>编码</p><ul><li><p>数字-&gt;数字</p><ul><li>非归零编码</li><li>归零编码</li><li>反向非归零编码</li><li>曼彻斯特编码</li><li>差曼彻斯特编码</li></ul></li><li><p>模拟-&gt;数字</p><ul><li>常见于对音频信号的PCM脉冲调制</li><li>三步骤：采用-&gt;量化-&gt;编码</li></ul></li></ul></li><li><p>调制</p><ul><li><p>数字-&gt;模拟</p><ul><li><p>幅移键控(调幅)</p></li><li><p>频移键控(调频)</p></li><li><p>相移键控(调相)</p></li><li><p>正交振幅调制(调幅+调相)</p><ul><li>R=Blog2(mn)</li></ul></li></ul></li><li><p>模拟-&gt;模拟</p><ul><li>频分复用技术等</li></ul></li></ul></li></ul></li></ul></li><li><p>接口特性</p><ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>规程特性</li></ul></li><li><p>两个定理</p><ul><li><p>奈氏准则</p><ul><li>理想低通信道下的极限数据传输率=2Wlog2（V）b/s</li></ul></li><li><p>香农定理</p><ul><li>信道的极限数据传输率=Wlog2（1+S/N）b/s</li></ul></li></ul></li><li><p>传输介质</p><ul><li><p>非导向型</p><ul><li>无线电波、微波、红外线、激光</li></ul></li><li><p>导向性</p><ul><li>双绞线、同轴电缆、光纤</li></ul></li></ul></li><li><p>设备</p><ul><li><p>中继器</p><ul><li>将信号整形放大再转发出去，消除信号的失真和衰减问题，具有5-3-4规则</li></ul></li><li><p>集线器</p><ul><li>实质上是一个多端口中继器，对信号进行放大后发到其他所有端口</li></ul></li></ul></li></ul><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><ul><li><p>功能：为网络层提供服务、链路管理、帧定界、帧同步与透明传输、流量控制、差错控制</p></li><li><p>封装成帧</p><ul><li><p>字符计数法</p><ul><li>在帧头部使用一个计数字段来标明帧内字符数</li></ul></li><li><p>首尾定界法</p><ul><li><p>字符填充</p><ul><li>在数据中的特殊字符前面用转义字符填充</li></ul></li><li><p>零比特填充</p><ul><li>数据区每遇到连续5个1就填充一个0</li></ul></li></ul></li><li><p>违规编码法</p><ul><li>信号传输过程中采用违规的编码来表示帧的开始和结束</li></ul></li></ul></li><li><p>差错控制</p><ul><li><p>检错编码</p><ul><li>奇偶校验码</li><li>循环冗余吗CRC</li></ul></li><li><p>纠错编码</p><ul><li>海明码</li></ul></li></ul></li><li><p>可靠传输：数据链路层通常采用确认和超时重传两种机制来保证可靠传输</p></li><li><p>介质访问控制</p><ul><li><p>静态划分信道</p><ul><li><p>信道划分介质访问控制</p><ul><li><p>频分多路复用 FDM</p><ul><li>将多路信号调制到不同频率载波上叠加成一个复合信号</li></ul></li><li><p>时分多路复用 TDM</p><ul><li>将物理信道按时间片分为若干时间片，轮流给不同信号使用</li></ul></li><li><p>波分多路复用 WDM</p><ul><li>在一根光纤中传输不同波长（频率）的光信号</li></ul></li><li><p>码分多路复用 CDM</p><ul><li>靠不同编码来区分各路原始信号，例如CDMA技术</li></ul></li></ul></li></ul></li><li><p>动态划分信道</p><ul><li><p>轮询访问介质控制</p><ul><li><p>令牌传递协议</p><ul><li>只有得到令牌才可以传输数据，其他只有等待</li></ul></li></ul></li><li><p>随机访问介质控制</p><ul><li><p>ALOHA协议</p><ul><li><p>纯ALOHA</p><ul><li>不检测直接发送，若无确认则重发</li></ul></li><li><p>时隙ALOHA</p><ul><li>将时间划分为若干等长时隙，按时发送</li></ul></li></ul></li><li><p>CSMA协议</p><ul><li><p>1-坚持</p><ul><li>闲则发送，忙则继续监听</li></ul></li><li><p>非坚持</p><ul><li>闲则发送，忙则等待一个随机时间监听</li></ul></li><li><p>p-坚持</p><ul><li>闲则以概率p发送，1-p等待下一个时隙，忙则等待一个随机时间监听</li></ul></li></ul></li><li><p>CSMA/CD协议</p><ul><li>先听后发，边听边发，冲突停发，随机重发</li></ul></li><li><p>CSMA/CA协议</p><ul><li>预约信道，ACK帧，RTS/CTS帧</li></ul></li></ul></li></ul></li></ul></li><li><p>流量控制<br>可靠传输<br>滑动窗口</p><ul><li><p>流量控制</p><ul><li>单帧滑动窗口与停止-等待协议</li><li>多帧滑动窗口与后退N帧协议（GBN）</li><li>多帧滑动窗口与选择重传协议（SR）</li></ul></li><li><p>可靠传输</p><ul><li>可靠传输机制是为了使数据可以正确稳定的传输和接收而制定的规则。</li></ul></li><li><p>滑动窗口</p><ul><li>滑动窗口协议的基本原理就是在任意时刻，发送方都维持了一个连续的允许发送的帧的序号，称为<code>发送窗口</code>；同时，接收方也维持了一个连续的允许接收的帧的序号，称为<code>接收窗口</code>。</li></ul></li></ul></li><li><p>设备</p><ul><li><p>网桥</p><ul><li>透明网桥</li><li>源路由网桥</li></ul></li><li><p>交换机</p><ul><li><p>特点：实际就是一个多端口网桥</p></li><li><p>交换方式</p><ul><li>直通式</li><li>存储转发</li></ul></li></ul></li><li><p>冲突域、广播域</p></li></ul></li><li><p>局域网</p><ul><li><p>基本概念及体系结构</p><ul><li><p>在一个较小地理范围类，将各种计算机等设备通过双绞线等介质连接</p></li><li><p>四种拓扑结构</p><ul><li>星型</li><li>总线型</li><li>环型</li><li>树型</li></ul></li><li><p>传输介质</p><ul><li>有线局域网：双绞线、同轴电缆、光纤</li><li>无线局域网：电磁波</li></ul></li><li><p>介质访问控制方法</p><ul><li>CSMA/CD</li><li>令牌总线</li><li>令牌环</li></ul></li><li><p>分类</p><ul><li>以太网</li><li>令牌环网</li><li>FDDI网</li><li>ATM网</li><li>无线局域网 WLAN</li></ul></li><li><p>IEEE 802 </p></li><li><p>链路层的两个控制子层</p><ul><li>逻辑链路控制子层 LLC</li><li>介质访问控制字长 MAC</li></ul></li></ul></li><li><p>以太网</p><ul><li><p>传输介质：粗缆、细缆、光纤、双绞线</p></li><li><p>拓扑结构：总线型、星型、点对点</p></li><li><p>以太网DIX Ethernet V2标准的MAC帧的格式</p></li><li><p>高速以太网</p><ul><li>100BASE-T以太网</li><li>吉比特以太网</li><li>10吉比特以太网</li></ul></li></ul></li><li><p>IEEE 802.11<br>无线局域网</p><ul><li><p>无线局域网分类</p><ul><li>有固定基础设施无线局域网</li><li>无固定基础设施无线局域网自组织网络</li></ul></li></ul></li></ul></li><li><p>广域网</p><ul><li><p>PPP协议</p><ul><li>面向字节，采用字节填充方式，只支持全双工链路</li><li>三个组成部分</li><li>工作状态图</li></ul></li><li><p>HDLC协议</p><ul><li><p>面向比特，采用0比特插入法，帧类分为信息帧、监督帧、无编号帧</p></li><li><p>三种站</p><ul><li>主站</li><li>从站</li><li>复合站</li></ul></li><li><p>两种配置</p><ul><li>平衡配置</li><li>非平衡配置</li></ul></li><li><p>三种数据操作方式</p><ul><li>正常响应方式</li><li>异步平衡方式</li><li>异步响应方式</li></ul></li></ul></li><li><p>HDLC与PPP协议的异同</p></li></ul></li></ul><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><ul><li><p>网络层的功能</p><ul><li><p>   网络层的功能（路由选择与分组转发、异构网络互连、拥塞控制）</p></li><li><p> (电路交换、报文交换、分组交换[无连接的数据报方式、面向连接的虚电路方式）</p><ul><li>子主题 1</li></ul></li></ul></li><li><p>路由算法与路由协议概述</p><ul><li><p>路由算法与路由协议概述</p><ul><li><p>静态路由算法</p></li><li><p>动态路由算法</p><ul><li><p>距离-向量路由算法</p><ul><li>RIP</li></ul></li><li><p>链路状态路由算法</p><ul><li>OSPF</li></ul></li></ul></li><li><p>层次路由</p><ul><li><p>内部网关协议  IGP</p><ul><li>RIP、OSPF</li></ul></li><li><p>外部网关协议  EGP</p><ul><li>BGP</li></ul></li></ul></li></ul></li></ul></li><li><p>IPv4</p><ul><li><p>IPv4</p><ul><li><p>IPv4分组</p><ul><li><p>IPv4分组格式</p><ul><li>一个IP分组由首部和数据两部分组成</li></ul></li><li><p>IP数据报分片</p><ul><li>一个链路层数据报能承载的最大数据量称为最大传送单元(MTU)。当IP数据报的总长度大于链路MTU时，就需要将IP数据报中的数据分装在两个或多个较小的IP数据报中，这些较小的数据报称为片</li></ul></li><li><p>网络层的路由器执行的分组转发算法</p></li></ul></li><li><p>IPv4与NAT</p><ul><li><p>IPv4地址</p><ul><li><p>组成与分类</p><ul><li>连接到因特网上的每台主机(或路由器)都分配一个32比特的全球唯一标识符，即IP地址。传统的IP地址是分类的地址，分为A、B、C、D、E五类。</li><li>无论哪类IP地址，都由网络号和主机号两部分组成，IP地址::= {&lt;网络号&gt;, &lt;主机号&gt;}</li><li>其中网络号标志主机(或路由器)所连接到的网络，一个网络号在整个因特网范围内必须是唯一的。</li><li>主机号标志该主机(或路由器)，一台主机号在它前面的网络号所指明的网络范围内必须是唯一的。</li></ul></li><li><p>特殊地址不做主机IP地址</p></li><li><p>常用IP地址ABC使用范围</p></li><li><p>IP地址的重要特点</p></li></ul></li><li><p>网络地址转换—NAT</p><ul><li><p>NAT简介</p><ul><li>网络地址转换(NAT)是指通过将专用网络地址(如Intranet)转换为公用地址(如Internet),从而对外隐藏内部管理的IP地址。它使得整个专用网只需要一个全球IP地址就可以与因特网连通</li></ul></li><li><p>私有IP地址</p><ul><li>为了网络安全，划出了部分IP地址为私有IP地址。私有IP地址只用于LAN,不用于WAN连接(因此私有IP地址不能直接用于Internet,必须通过网关利用NAT把私有IP地址转换为Internet中合法的全球IP地址后才能用于Internet), 并且允许私有IP地址被LAN重复使用。这有效地解决了IP地址不足的问题</li></ul></li><li><p>专用互联网/本地互联网</p><ul><li>在因特网中的所有路由器，对目的地址是私有地址的数据报一律不进行转发。这种采用私有IP地址的互联网络称为专用互联网或本地互联网。私有IP地址也称可重用地址</li></ul></li><li><p>如何实现私有IP地址上网？</p></li></ul></li></ul></li><li><p>子网划分与子网掩码、CIDR</p><ul><li><p>子网划分</p><ul><li>从1985年起，在IP地址中又增加了一个“子网号字段”，使两级IP地址变成了三级IP地址。这种做法称为子网划分</li><li>子网划分的基本思路</li></ul></li><li><p>子网掩码</p><ul><li>子网掩码是一个与IP地址相对应的、长32bit的二进制串,它由一串1和跟随的一串0组成</li><li>子网掩码的引入，为了告诉主机或路由器对一个A类、B类、C类网络进行了子网划分，使用子网掩码来表达对原网络中主机号的借位。为了使外部可以连接子网内的网络。</li><li>1对应于IP地址中的网络号及子网号，而0对应于主机号</li><li>计算机只需将IP地址和其对应的子网掩码逐位“与”(逻辑AND运算)，就可得出相应子网的网络地址</li></ul></li><li><p>无分类域间路由选择CIDR</p><ul><li><p>为什么要发明CIDR?</p><ul><li>随着互联网的发展，基于分类网络进行地址分配和路由IP数据包的设计显得可扩充性不足 </li></ul></li><li><p>两张图了解CIDR的特点</p></li><li><p>路由器根据路由表转发的CIDR原则</p></li></ul></li></ul></li><li><p>地址解析协议—ARP协议</p><ul><li><p>IP地址与硬件地址的概念</p></li><li><p>ARP协议引入</p><ul><li>无论网络层使用什么协议，在实际网络的链路上传送数据帧时，最终必须使用硬件地址。所以需要一种方法来完成 IP地址到MAC地址的映射，这就是地址解析协议(Address ResolutionProtocol, ARP)</li></ul></li></ul></li><li><p>动态主机配置协议—DHCP协议</p><ul><li><p>概念</p><ul><li>动态主机配置协议(Dynamic Host Configuration Protocol, DHCP)常用于给主机动态地分配IP地址，它提供了即插即用联网的机制，这种机制允许一台计算机加入新的网络和获取IP地址而不用手工参与。</li></ul></li><li><p>DHCP的工作原理</p></li></ul></li><li><p>网际控制报文协议— ICMP</p><ul><li><p>概念</p><ul><li>为了提高IP数据报交付成功的机会，在网络层使用了网际控制报文协议(Internet Control Message Protocol, ICMP)来让主机或路由器报告差错和异常情况。</li></ul></li><li><p>ICMP报文的组成</p></li><li><p>分类</p><ul><li><p>ICMP差错报告报文</p><ul><li>不发送ICMP差错报文的情况</li></ul></li><li><p>ICMP询问报文</p></li></ul></li><li><p>ICMP的应用</p><ul><li><p>分组网间探测PING(用来测试两台主机之间的连通性)</p><ul><li>使用了ICMP回送请求和回答报文</li><li>PING工作在应用层</li></ul></li><li><p>Traceroute(UNIX中的名字，在Windows中是tracert，可以用来跟踪分组经过的路由)</p><ul><li>使用了ICMP时间超过报文</li><li>Traceroute/Tracert工作在网络层</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>IPv6</p><ul><li><p>IPv6</p><ul><li><p>IPv6产生的原因</p></li><li><p>IPv6的数据报格式</p></li><li><p>IPv6与IPv4的不同</p></li><li><p>IPv6地址表现形式</p><ul><li>一般形式</li><li>压缩形式</li></ul></li><li><p>IPv6基本地址类型</p><ul><li>单播</li><li>多播</li><li>任播</li></ul></li><li><p>IPv6向IPv4过渡的策略</p><ul><li>双协议栈</li><li>隧道技术</li></ul></li></ul></li></ul></li><li><p>路由协议</p><ul><li><p>路由选择协议</p><ul><li>路由信息协议—RIP协议</li><li>开放最短路径优先协议—OSPF协议</li><li>边界网关协议—BGP协议</li></ul></li></ul></li><li><p>IP组播</p><ul><li><p>IP组播</p><ul><li><p>IP数据报的三种传输格式</p></li><li><p>IP组播地址</p></li><li><p>IGMP协议</p></li><li><p>组播路由选择协议</p></li><li><p>IP组播的两种情况</p><ul><li>局域网上硬件组播</li><li>在因特网的范围内进行组播</li></ul></li></ul></li></ul></li><li><p>移动IP</p><ul><li><p>移动IP</p><ul><li><p>什么是移动IP？</p></li><li><p>移动IP相关术语</p><ul><li>移动结点</li><li>归属代理（本地代理）</li><li>外部代理（外地代理）</li><li>永久地址（归属地址/主地址）</li><li>转交地址（辅地址）</li></ul></li><li><p>移动IP通信过程</p></li></ul></li></ul></li><li><p>路由器</p><ul><li><p>网络层设备路由器</p><ul><li>路由器</li><li>路由器、网桥、集线器之间的区别</li><li>路由表与路由转发、转发表</li></ul></li></ul></li></ul><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><ul><li><p>传输层提供的服务</p><ul><li><p>传输层提供的服务及功能概述</p><ul><li><p>传输层提供的服务</p><ul><li>为应用层提通信供服务，使用网络层服务</li></ul></li><li><p>传输层提供的功能概述</p><ul><li>提供进程与进程之间的逻辑通信</li><li>复用和分用</li><li>对接受到的报文进行差错控制</li><li>传输层协议UDP与TCP</li></ul></li><li><p>传输层的寻址与端口</p><ul><li>端口的作用</li><li>端口号的分类</li><li>套接字</li></ul></li><li><p>无连接UDP和面向连接TCP服务</p></li></ul></li></ul></li><li><p>UDP协议</p><ul><li><p> UDP协议</p><ul><li>用户数据报协议UDP概述及特点优势</li><li>UDP首部格式</li><li>当传输层从IP层收到UDP数据报时</li><li>UDP校验</li></ul></li></ul></li><li><p>TCP协议</p><ul><li><p>TCP协议</p><ul><li><p>TCP协议特点</p></li><li><p>TCP报文段的首部格式</p></li><li><p>TCP连接管理</p><ul><li>连接的建立 – – – 三次握手</li><li>SYN泛洪攻击</li></ul></li><li><p>TCP连接释放—-四次握手</p></li></ul></li><li><p>TCP可靠传输</p><ul><li>TCP可靠传输简介</li><li>序号</li><li>确认</li><li>重传</li></ul></li><li><p> TCP流量控制</p></li><li><p>TCP拥塞控制</p><ul><li><p>什么是拥塞控制？</p></li><li><p>拥塞控制与流量控制的区别</p></li><li><p>拥塞控制的4种算法</p><ul><li>慢开始与拥塞避免</li><li>快重传和快恢复</li></ul></li></ul></li></ul></li></ul><h4 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h4><h4 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h4><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><ul><li><p>应用层概述与网络应用模型</p><ul><li><p>应用层概述与网络应用模型</p><ul><li><p>应用层概述</p><ul><li><p>功能</p><ul><li>文件传输、访问和管理</li><li>电子邮件</li><li>虚拟终端</li><li>查询服务和远程作业登录</li></ul></li><li><p>重要协议</p><ul><li>FTP</li><li>SMTP、POP3</li><li>HTTP</li><li>DNS</li></ul></li></ul></li><li><p>网络应用模型</p><ul><li>客户/服务器模型（C/S）</li><li>P2P模型</li></ul></li></ul></li></ul></li><li><p>域名系统DNS</p><ul><li><p>详解DNS域名解析系统</p><ul><li><p>DNS系统</p></li><li><p>域名</p></li><li><p>域名服务器</p><ul><li>根域名服务器</li><li>顶级域名服务器</li><li>授权域名服务器(权限域名服务器)</li><li>本地域名服务器</li></ul></li><li><p>域名解析过程</p><ul><li>递归查询方式</li><li>常用递归与迭代相结合的查询方式</li></ul></li></ul></li></ul></li><li><p>FTP协议</p><ul><li><p>FTP协议</p><ul><li><p>FTP协议的功能</p></li><li><p>FTP工作原理</p><ul><li>控制连接和数据连接</li></ul></li></ul></li></ul></li><li><p>电子邮件系统的组成和结构</p><ul><li><p>电子邮件系统的组成和结构</p><ul><li><p>电子邮件的信息格式</p></li><li><p>电子邮件系统的组成结构</p></li><li><p>电子邮件协议</p><ul><li><p>SMTP</p><ul><li>MIME—多用途网络邮件扩充</li></ul></li><li><p>POP3</p><ul><li>IMAP—因特网报文存取协议</li></ul></li></ul></li><li><p>万维网的电子邮件</p></li></ul></li></ul></li><li><p>万维网与HTTP</p><ul><li><p>万维网www与HTTP协议</p><ul><li><p>www万维网</p><ul><li>什么是万维网？</li><li>万维网的组成</li><li>URL—统一资源定位符</li><li>万维网工作流程</li></ul></li><li><p>HTTP—超文本传输协议</p><ul><li>HTTP操作过程</li><li>HTTP特点</li><li>HTTP报文结构</li><li>WireShark捕获HTTP报文实例</li></ul></li><li><p>常用应用程序的协议及端口号</p></li></ul></li></ul></li></ul><h3 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h3><h3 id="系统网络体系结构SNA"><a href="#系统网络体系结构SNA" class="headerlink" title="系统网络体系结构SNA"></a>系统网络体系结构SNA</h3>]]></content>
    
    
    <summary type="html">学习计算机网络时的笔记</summary>
    
    
    
    <category term="学习" scheme="http://jaik.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="笔记" scheme="http://jaik.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机网络" scheme="http://jaik.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>夏天</title>
    <link href="http://jaik.top/2021/05/20/%E5%A4%8F%E5%A4%A9/"/>
    <id>http://jaik.top/2021/05/20/%E5%A4%8F%E5%A4%A9/</id>
    <published>2021-05-20T12:50:11.000Z</published>
    <updated>2021-05-20T12:50:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>黑塞说:这种夏天我很少经历过，充满力量和光芒。<br>已经很久没有纯粹的快乐了，夏天的风也不再充斥着奶油冰淇淋 。<br>似乎长大了，世界就褪色了，可该怎么样更好的生活。<br>早起早睡，经常健身，坚持阅读和学习。嘿，老生常谈，可似乎只能这样。<br>出游，没有很充足，合适的时间，平淡日子里的突然思索似乎更让人迷茫。<br>是的，我也不太清楚怎么更好的生活。<br>敲这段文字的时候，耳机放的是命に嫌われている，听过很多次，还是会迷失在这种充满张力的事物里。<br>有时候我在想，我到底是一个什么样的人呢。问题很傻吧，可确实困扰过我很久。<br>小的时候会去询问别人的意见，再大点就知道这也是件很傻的事情，索性就不会去做了。<br>问来的，内心深处是不认同的，不是嘴硬，这种偏差在我身上是确确实实存在。<br>这样，询问自己也许要换个问题，我究竟想成为什么样的人。<br>这个问题打记事起，生命的每一段历程都有不同的人提出，可答案都一样。<br>我不知道。</p>]]></content>
    
    
    <summary type="html">突然迷茫，自我审视</summary>
    
    
    
    <category term="念念碎" scheme="http://jaik.top/categories/%E5%BF%B5%E5%BF%B5%E7%A2%8E/"/>
    
    
    <category term="生活" scheme="http://jaik.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="夏天" scheme="http://jaik.top/tags/%E5%A4%8F%E5%A4%A9/"/>
    
    <category term="日记" scheme="http://jaik.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>致迷糊的阿浣同学</title>
    <link href="http://jaik.top/2021/04/21/%E8%87%B4%E8%BF%B7%E7%B3%8A%E7%9A%84%E9%98%BF%E6%B5%A3%E5%90%8C%E5%AD%A6/"/>
    <id>http://jaik.top/2021/04/21/%E8%87%B4%E8%BF%B7%E7%B3%8A%E7%9A%84%E9%98%BF%E6%B5%A3%E5%90%8C%E5%AD%A6/</id>
    <published>2021-04-21T04:24:32.000Z</published>
    <updated>2021-04-21T04:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>干嘛要脱离世俗，我带你去人间走走。（放于文前的约定【我超级世俗了】）<br>你知道情深不寿吗，与这个词相遇是在初中的课堂上，大概是金庸老爷子《书剑恩仇录》里的，那天印象很深（被罚抄了几十遍桃花源记），后排靠窗的位置，手握廉价书店的盗版武侠，尚且稚嫩的少年扭头向外，出了校门才能瞅见的大片树林，谈不上特别旖旎或者壮阔，却美得不像样子。<br>可能你不太明白这段闲字为什么会出现在这里，别念念碎臭一悲又凑字数（诶嘿嘿）<br>那时的我啊，跌至尘埃。<br>现在想来也确实蛮无力的，失足坠崖者触地前一刻是种什么感受呢。我不知道，却也有点明白了，自那打心底接受了独处，无关静谧，只是为了生活与自我审视。<br>几年前，一悲疯狂沉迷龙应台的书，感同身受是有的，迟了些日子罢了（在未知的某一刻与脑海里的文字相遇，这不正是多读书的魅力吗，闲暇要多看书嗷，龙应台真的推荐）。我记得她说，曾经不相信的，现在有些相信了，曾经坚定不移的，现在不那么相信了。最近，越发觉得自己最是深情最无情，年少的一语成谶有那么一丝悲凉。我也固执认为不会变，可事事不尽如人意，已经刻进生活的人，都会在记忆里死去。起初自我欺骗不过是长久没联系，等到确实明了了，也便知晓了这世上没有谁离不了谁，很无情对吗，对啊，很无趣。<br>道理是懂得，可真的不能去接受，我们这个年纪总该相信点什么吧。（这是我初中写给朋友的小纸条里面的，原话好像是：如果这都不能长久，那我该信些什么呢，我才十四五岁，总该相信点什么吧）不曾与你说道过，一悲遗憾的多数关于人，破镜再难重圆，无法挽回的，徒留遗憾悲哀。<br>嘿，说不定我们也有走散的一天，那时候会有另外一个人陪着你写书信，分享生活，而我可能遇见一个很像阿浣的有趣朋友，也许不会，不过这个戏份，我们都有参与，这样一想，也觉得公平的很。<br>当然，一悲尽量陪阿浣多走一段，还请放心，我会找到你，哪怕你在山谷，我也会踏月来。<br>你说如果所热爱的成为职业，究竟是好事还是悲哀，曾经一起写小说的朋友现在提起文字便是会不会有人看，当初只是起于感触有趣的胡言乱语变成了油盐柴米人民币。我还在寻找答案，等我知道了，我再告诉你。<br>好像这么多年来，我都没有找到一件真正热爱的事情（老气横秋的话都帮一悲想好了，阿浣也太贴心了【狗头】），陈一悲还在寻找缺席了二十年的热爱，而你，十五六七的年纪，那些稍有遗憾的事物，日后拾起也算得上生活的彩蛋，何况神厨小阿浣还有什么值得遗憾的呢，真真正正让人遗憾的，是那个止于怯懦的自己。<br>想要的花花，想换的发型，想去的地方都止于胆怯，怕被人嘲笑，怕自己搞砸，那时的我亦如现在的你。而我现在回望，不过笑笑而已，我很自私，我这一生，不该是讨好众生，不过是取悦自己，愉悦亲朋挚交。<br>所以，阿浣，去做让灵魂发光的事吧。（来取悦我吧【滑稽】）</p>]]></content>
    
    
    <summary type="html">写给阿浣小朋友的书信</summary>
    
    
    
    <category term="书信" scheme="http://jaik.top/categories/%E4%B9%A6%E4%BF%A1/"/>
    
    
    <category term="生活" scheme="http://jaik.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="书信" scheme="http://jaik.top/tags/%E4%B9%A6%E4%BF%A1/"/>
    
    <category term="致阿浣" scheme="http://jaik.top/tags/%E8%87%B4%E9%98%BF%E6%B5%A3/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建自己的博客</title>
    <link href="http://jaik.top/2020/10/10/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://jaik.top/2020/10/10/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-10-10T02:54:00.000Z</published>
    <updated>2020-10-10T02:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="了解Gridea"><a href="#了解Gridea" class="headerlink" title="了解Gridea"></a>了解Gridea</h5><p>第一次搭博客的时候，还是个纯小白，主流的<a href="https://jaikchen.github.io/">hexo</a>根本整不明白，偶然听说了<a href="https://gridea.dev/">Gridea</a>才搭建好了自己博客1.0版本,虽然使用的时候还是有一些不大不小的缺点，但Gridea 提供了将博客部署到 GitHub Pages、Coding Pages 和通过 SFTP 的方式上传到自己的服务器的功能确实很适合新人上手搭建属于自己的秘密基地。</p><p>Gridea 里文章编辑器已经有了一些基本样式，点击侧边的按钮便可以添加，很方便初学者使用。不过啊，都打算写博客了，确定不学一下 Markdown？</p><p>如上文所说，Gridea 是一个简单开源的静态博客写作客户端，写这段文字的时候，它已具备了博客所需的基本功能。简单的操作，开放的源代码，让Gridea保存活力，静态博客也节省了博客开支，毕竟服务器是要钱的。</p><h4 id="关于安装"><a href="#关于安装" class="headerlink" title="关于安装"></a>关于安装</h4><p><a href="https://gridea.dev/">Gridea官网下载</a>对应平台的安装程序按照个人的安装习惯安装即可。还需要一个稍微流畅的网络，当然会科学上网最好，不知道怎么科学上网就算了，一悲不会告诉你的。</p><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p><strong>创建 GitHub 账号，并创建一个仓库 Token</strong></p><p>第一步还用说，当然是<a href="https://github.com/">注册GitHub</a>（友情提示，名字最好不要乱起，后面会用到的）。登录 GitHub 之后，<a href="https://github.com/settings/tokens/new">创建一个新的token</a>，命名什么的，自己来就好勾选上 repo 的相关权限即可（为什么不勾其他的？想了解？请看官方文档）。生成之后记得把 Token 复制到你的本地，创建个文本或者怎么样保留都行，因为一旦关闭网页就再也看不到它了。</p><p><img src="https://fp1.fghrsh.net/2021/06/12/ec7f529b3a6fcc0ee8a4c63af147bba5.png"></p><p><img src="https://gridea.dev/post-images/1575874322709.png" alt="img"></p><p><strong>创建仓库，存放网址的文件</strong></p><p>创建一个公开仓库，名为 username.github.io。不会真有小笨蛋叫username吧？这里是你的用户名。</p><p><img src="https://fp1.fghrsh.net/2021/06/12/811c29e3750c6d2eead3cdd0c7257ff1.png"></p><p><strong>进入 Gridea 开始进行远程设置</strong></p><p>按照下图进行设置，当然别照抄啊，都是抄作业过来的，注意点。然后点击「检测远程链接」，进行配置检查。远程连接成功后会有提示，之后就可以预览或者同步了（同步的话要等上一段时间，不太久一般）以后访问的默认地址就是你填写的域名</p><p><img src="https://fp1.fghrsh.net/2021/06/12/303f3492c368eabe0ab47dea0219182b.png"></p><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>很好，成功水了一篇博客。当然也是记录一下自己瞎胡搞的历程，其实之前还有一些好玩的，都以为没有记录慢慢忘了，害。</p><p>对了，欢迎来交换友链，如果想更换域名的话，可以去买一个域名备案一下。至于美化什么的，各有爱好，大胆尝试呗。</p>]]></content>
    
    
    <summary type="html">使用Gridea+Github搭建比较简单个人博客</summary>
    
    
    
    <category term="记录" scheme="http://jaik.top/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="博客" scheme="http://jaik.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Gradea" scheme="http://jaik.top/tags/Gradea/"/>
    
    <category term="记录" scheme="http://jaik.top/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Github" scheme="http://jaik.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>致可爱的阿浣同学</title>
    <link href="http://jaik.top/2020/09/26/%E8%87%B4%E5%8F%AF%E7%88%B1%E7%9A%84%E9%98%BF%E6%B5%A3%E5%90%8C%E5%AD%A6/"/>
    <id>http://jaik.top/2020/09/26/%E8%87%B4%E5%8F%AF%E7%88%B1%E7%9A%84%E9%98%BF%E6%B5%A3%E5%90%8C%E5%AD%A6/</id>
    <published>2020-09-26T09:23:05.000Z</published>
    <updated>2020-09-26T09:23:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>诶嘿嘿，<del>是和一悲一样超级正经的开头诶。</del>不知阿浣有没这么一瞬间，觉得随着年龄越来越大，日子啊，一天不如一天长了 (哦对，你还是个小朋友。现在一悲的一天大概只有20小时)期待和热烈也越发珍稀，天大的欢喜大抵不如儿时盛夏里的冰可乐。<br>一年多前一悲也很喜欢晚自习写一些乱七八糟的东西，花费掉很多很多时间，精力。看见同学认真学习还会有点迷惘，迷茫别人的动力，迷茫自己的性格。(后来问他们才知道，他们也经常发呆走神，随便划划，这大概就是我们不够优秀的原因吧，噗哈哈哈哈)<br>不过现在挺庆幸的，没有那些自我倾泻与吐槽，或许就会错过即将相遇的温柔。【一个人压抑久了，人就变得沉默了，那时候一些往日的情怀就再也找不到了。】(俺感觉自己还行)<br>说起高中，三年的故事像场枯燥无味夹杂着俏皮的老话剧。怀念有的，也会感慨这么多毫不起眼的瞬间，怎么就塑造了我的高中。(老了老了)却也从未想过重回一年多前的生活。<del>冷漠无情陈一悲</del><br>也是，少年安得长少年，三百遍的老街上一次听也是半年前了，（所以,<del>爱会消失</del>,对吗？）也认识阿浣两个月了。（也咕咕咕了好久了，诶嘿嘿。）不知阿浣开始适应高中生活没，找到学习方法没，休息调整的好没，数学能听懂了没……（要听男妈妈的话，别让他担心）<br>玩他笑而已，这段路人终究爱莫能助。<br>多年以前遇见的一句话，很喜欢，现在也送给你。<br>佛不渡人，人自渡。<br>我知晓这是一段很无趣很难熬的岁月，可它终会消逝，就像是牧羊少年的漫长的梦。<br>嘿，姑娘，你要懂得，各人有各人的隐晦与皎洁，有时候，你只能一个人孤单而倔强的走下去。<br>嘿，姑娘，如果我们能相遇，你能给我一个阳光且温暖的深拥吗。<br>当然，每个人都不像看起来那么开朗。他们是，你是，我也一样。<br>很多人说喜欢一悲的性子。其实并没有那么令人向往，一悲也是在错过了很多温柔的人，糟蹋很多温暖后，才慢慢明白，与人为善，对人温柔总不会是坏事。<br>不是什么成功人士，很难有经验可言，不过素来坚信十来二十岁的年纪，做什么都进一步有进一步的欢喜。要有个交心的朋友，当然可以是我。不必强行去合群，去委屈自己。少期待，多努力，且静候。<br>如果真的要给个建议，那么请多读书，胸藏文墨虚若谷，腹有诗书气自华。<br>最后啊，请照顾好自己，多和爸妈聊天，保持对生活的热爱。</p>]]></content>
    
    
    <summary type="html">写给阿浣小朋友的书信</summary>
    
    
    
    <category term="书信" scheme="http://jaik.top/categories/%E4%B9%A6%E4%BF%A1/"/>
    
    
    <category term="生活" scheme="http://jaik.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="书信" scheme="http://jaik.top/tags/%E4%B9%A6%E4%BF%A1/"/>
    
    <category term="致阿浣" scheme="http://jaik.top/tags/%E8%87%B4%E9%98%BF%E6%B5%A3/"/>
    
  </entry>
  
</feed>
